!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	0.0.0	//
0.1.0 - 2013-07-22	docs/CHANGELOG.md	/^## 0.1.0 - 2013-07-22$/;"	s
Action	app.go	/^	Action ActionFunc$/;"	m	struct:cli.App	typeref:typename:ActionFunc
Action	app_test.go	/^	Total, ShellComplete, OnUsageError, Before, CommandNotFound, Action, After, SubCommand int$/;"	m	struct:cli.opCounts	typeref:typename:int
Action	command.go	/^	Action ActionFunc$/;"	m	struct:cli.Command	typeref:typename:ActionFunc
ActionFunc	funcs.go	/^type ActionFunc func(*Context) error$/;"	t	package:cli
Actions returns errors	docs/migrate-v1-to-v2.md	/^# Actions returns errors$/;"	c
AddCommand	category.go	/^func (c *commandCategories) AddCommand(category string, command *Command) {$/;"	f	unknown:cli.commandCategories
Added	docs/CHANGELOG.md	/^### Added$/;"	S
Additional context	.github/ISSUE_TEMPLATE/v1-bug-report.md	/^## Additional context$/;"	s
Additional context	.github/ISSUE_TEMPLATE/v2-bug-report.md	/^## Additional context$/;"	s
After	app.go	/^	After AfterFunc$/;"	m	struct:cli.App	typeref:typename:AfterFunc
After	app_test.go	/^	Total, ShellComplete, OnUsageError, Before, CommandNotFound, Action, After, SubCommand int$/;"	m	struct:cli.opCounts	typeref:typename:int
After	command.go	/^	After AfterFunc$/;"	m	struct:cli.Command	typeref:typename:AfterFunc
AfterFunc	funcs.go	/^type AfterFunc func(*Context) error$/;"	t	package:cli
Aliases	command.go	/^	Aliases []string$/;"	m	struct:cli.Command	typeref:typename:[]string
Aliases	flag_bool.go	/^	Aliases          []string$/;"	m	struct:cli.BoolFlag	typeref:typename:[]string
Aliases	flag_choice.go	/^	Aliases     []string$/;"	m	struct:cli.ChoiceFlag	typeref:typename:[]string
Aliases	flag_duration.go	/^	Aliases     []string$/;"	m	struct:cli.DurationFlag	typeref:typename:[]string
Aliases	flag_float64.go	/^	Aliases     []string$/;"	m	struct:cli.Float64Flag	typeref:typename:[]string
Aliases	flag_float64_slice.go	/^	Aliases     []string$/;"	m	struct:cli.Float64SliceFlag	typeref:typename:[]string
Aliases	flag_generic.go	/^	Aliases     []string$/;"	m	struct:cli.GenericFlag	typeref:typename:[]string
Aliases	flag_int.go	/^	Aliases     []string$/;"	m	struct:cli.IntFlag	typeref:typename:[]string
Aliases	flag_int64.go	/^	Aliases     []string$/;"	m	struct:cli.Int64Flag	typeref:typename:[]string
Aliases	flag_int64_slice.go	/^	Aliases     []string$/;"	m	struct:cli.Int64SliceFlag	typeref:typename:[]string
Aliases	flag_int_slice.go	/^	Aliases     []string$/;"	m	struct:cli.IntSliceFlag	typeref:typename:[]string
Aliases	flag_path.go	/^	Aliases     []string$/;"	m	struct:cli.PathFlag	typeref:typename:[]string
Aliases	flag_string.go	/^	Aliases     []string$/;"	m	struct:cli.StringFlag	typeref:typename:[]string
Aliases	flag_string_slice.go	/^	Aliases     []string$/;"	m	struct:cli.StringSliceFlag	typeref:typename:[]string
Aliases	flag_timestamp.go	/^	Aliases     []string$/;"	m	struct:cli.TimestampFlag	typeref:typename:[]string
Aliases	flag_uint.go	/^	Aliases     []string$/;"	m	struct:cli.UintFlag	typeref:typename:[]string
Aliases	flag_uint64.go	/^	Aliases     []string$/;"	m	struct:cli.Uint64Flag	typeref:typename:[]string
AllCommands	fish.go	/^	AllCommands []string$/;"	m	struct:cli.fishCompletionTemplate	typeref:typename:[]string
Alternate Names	docs/v1/manual.md	/^#### Alternate Names$/;"	t
Alternate Names	docs/v2/manual.md	/^#### Alternate Names$/;"	t
App	app.go	/^type App struct {$/;"	s	package:cli
App	context.go	/^	App           *App$/;"	m	struct:cli.Context	typeref:typename:*App
App	docs.go	/^	App          *App$/;"	m	struct:cli.cliTemplate	typeref:typename:*App
App	fish.go	/^	App         *App$/;"	m	struct:cli.fishCompletionTemplate	typeref:typename:*App
AppHelpTemplate	template.go	/^var AppHelpTemplate = `NAME:$/;"	v	package:cli
Appending Commands	docs/migrate-v1-to-v2.md	/^# Appending Commands$/;"	c
Apply	altsrc/flag_generated.go	/^func (f *BoolFlag) Apply(set *flag.FlagSet) error {$/;"	f	unknown:altsrc.BoolFlag	typeref:typename:error
Apply	altsrc/flag_generated.go	/^func (f *DurationFlag) Apply(set *flag.FlagSet) error {$/;"	f	unknown:altsrc.DurationFlag	typeref:typename:error
Apply	altsrc/flag_generated.go	/^func (f *Float64Flag) Apply(set *flag.FlagSet) error {$/;"	f	unknown:altsrc.Float64Flag	typeref:typename:error
Apply	altsrc/flag_generated.go	/^func (f *Float64SliceFlag) Apply(set *flag.FlagSet) error {$/;"	f	unknown:altsrc.Float64SliceFlag	typeref:typename:error
Apply	altsrc/flag_generated.go	/^func (f *GenericFlag) Apply(set *flag.FlagSet) error {$/;"	f	unknown:altsrc.GenericFlag	typeref:typename:error
Apply	altsrc/flag_generated.go	/^func (f *Int64Flag) Apply(set *flag.FlagSet) error {$/;"	f	unknown:altsrc.Int64Flag	typeref:typename:error
Apply	altsrc/flag_generated.go	/^func (f *Int64SliceFlag) Apply(set *flag.FlagSet) error {$/;"	f	unknown:altsrc.Int64SliceFlag	typeref:typename:error
Apply	altsrc/flag_generated.go	/^func (f *IntFlag) Apply(set *flag.FlagSet) error {$/;"	f	unknown:altsrc.IntFlag	typeref:typename:error
Apply	altsrc/flag_generated.go	/^func (f *IntSliceFlag) Apply(set *flag.FlagSet) error {$/;"	f	unknown:altsrc.IntSliceFlag	typeref:typename:error
Apply	altsrc/flag_generated.go	/^func (f *PathFlag) Apply(set *flag.FlagSet) error {$/;"	f	unknown:altsrc.PathFlag	typeref:typename:error
Apply	altsrc/flag_generated.go	/^func (f *StringFlag) Apply(set *flag.FlagSet) error {$/;"	f	unknown:altsrc.StringFlag	typeref:typename:error
Apply	altsrc/flag_generated.go	/^func (f *StringSliceFlag) Apply(set *flag.FlagSet) error {$/;"	f	unknown:altsrc.StringSliceFlag	typeref:typename:error
Apply	altsrc/flag_generated.go	/^func (f *Uint64Flag) Apply(set *flag.FlagSet) error {$/;"	f	unknown:altsrc.Uint64Flag	typeref:typename:error
Apply	altsrc/flag_generated.go	/^func (f *UintFlag) Apply(set *flag.FlagSet) error {$/;"	f	unknown:altsrc.UintFlag	typeref:typename:error
Apply	app_test.go	/^func (c *customBoolFlag) Apply(set *flag.FlagSet) error {$/;"	f	unknown:cli.customBoolFlag	typeref:typename:error
Apply	flag_bool.go	/^func (f *BoolFlag) Apply(set *flag.FlagSet) error {$/;"	f	unknown:cli.BoolFlag	typeref:typename:error
Apply	flag_choice.go	/^func (f *ChoiceFlag) Apply(set *flag.FlagSet) error {$/;"	f	unknown:cli.ChoiceFlag	typeref:typename:error
Apply	flag_duration.go	/^func (f *DurationFlag) Apply(set *flag.FlagSet) error {$/;"	f	unknown:cli.DurationFlag	typeref:typename:error
Apply	flag_float64.go	/^func (f *Float64Flag) Apply(set *flag.FlagSet) error {$/;"	f	unknown:cli.Float64Flag	typeref:typename:error
Apply	flag_float64_slice.go	/^func (f *Float64SliceFlag) Apply(set *flag.FlagSet) error {$/;"	f	unknown:cli.Float64SliceFlag	typeref:typename:error
Apply	flag_generic.go	/^func (f GenericFlag) Apply(set *flag.FlagSet) error {$/;"	f	unknown:cli.GenericFlag	typeref:typename:error
Apply	flag_int.go	/^func (f *IntFlag) Apply(set *flag.FlagSet) error {$/;"	f	unknown:cli.IntFlag	typeref:typename:error
Apply	flag_int64.go	/^func (f *Int64Flag) Apply(set *flag.FlagSet) error {$/;"	f	unknown:cli.Int64Flag	typeref:typename:error
Apply	flag_int64_slice.go	/^func (f *Int64SliceFlag) Apply(set *flag.FlagSet) error {$/;"	f	unknown:cli.Int64SliceFlag	typeref:typename:error
Apply	flag_int_slice.go	/^func (f *IntSliceFlag) Apply(set *flag.FlagSet) error {$/;"	f	unknown:cli.IntSliceFlag	typeref:typename:error
Apply	flag_path.go	/^func (f *PathFlag) Apply(set *flag.FlagSet) error {$/;"	f	unknown:cli.PathFlag	typeref:typename:error
Apply	flag_string.go	/^func (f *StringFlag) Apply(set *flag.FlagSet) error {$/;"	f	unknown:cli.StringFlag	typeref:typename:error
Apply	flag_string_slice.go	/^func (f *StringSliceFlag) Apply(set *flag.FlagSet) error {$/;"	f	unknown:cli.StringSliceFlag	typeref:typename:error
Apply	flag_timestamp.go	/^func (f *TimestampFlag) Apply(set *flag.FlagSet) error {$/;"	f	unknown:cli.TimestampFlag	typeref:typename:error
Apply	flag_uint.go	/^func (f *UintFlag) Apply(set *flag.FlagSet) error {$/;"	f	unknown:cli.UintFlag	typeref:typename:error
Apply	flag_uint64.go	/^func (f *Uint64Flag) Apply(set *flag.FlagSet) error {$/;"	f	unknown:cli.Uint64Flag	typeref:typename:error
ApplyInputSourceValue	altsrc/flag.go	/^func (f *BoolFlag) ApplyInputSourceValue(context *cli.Context, isc InputSourceContext) error {$/;"	f	unknown:altsrc.BoolFlag	typeref:typename:error
ApplyInputSourceValue	altsrc/flag.go	/^func (f *DurationFlag) ApplyInputSourceValue(context *cli.Context, isc InputSourceContext) error/;"	f	unknown:altsrc.DurationFlag	typeref:typename:error
ApplyInputSourceValue	altsrc/flag.go	/^func (f *Float64Flag) ApplyInputSourceValue(context *cli.Context, isc InputSourceContext) error /;"	f	unknown:altsrc.Float64Flag	typeref:typename:error
ApplyInputSourceValue	altsrc/flag.go	/^func (f *GenericFlag) ApplyInputSourceValue(context *cli.Context, isc InputSourceContext) error /;"	f	unknown:altsrc.GenericFlag	typeref:typename:error
ApplyInputSourceValue	altsrc/flag.go	/^func (f *IntFlag) ApplyInputSourceValue(context *cli.Context, isc InputSourceContext) error {$/;"	f	unknown:altsrc.IntFlag	typeref:typename:error
ApplyInputSourceValue	altsrc/flag.go	/^func (f *IntSliceFlag) ApplyInputSourceValue(context *cli.Context, isc InputSourceContext) error/;"	f	unknown:altsrc.IntSliceFlag	typeref:typename:error
ApplyInputSourceValue	altsrc/flag.go	/^func (f *PathFlag) ApplyInputSourceValue(context *cli.Context, isc InputSourceContext) error {$/;"	f	unknown:altsrc.PathFlag	typeref:typename:error
ApplyInputSourceValue	altsrc/flag.go	/^func (f *StringFlag) ApplyInputSourceValue(context *cli.Context, isc InputSourceContext) error {$/;"	f	unknown:altsrc.StringFlag	typeref:typename:error
ApplyInputSourceValue	altsrc/flag.go	/^func (f *StringSliceFlag) ApplyInputSourceValue(context *cli.Context, isc InputSourceContext) er/;"	f	unknown:altsrc.StringSliceFlag	typeref:typename:error
ApplyInputSourceValues	altsrc/flag.go	/^func ApplyInputSourceValues(context *cli.Context, inputSourceContext InputSourceContext, flags [/;"	f	package:altsrc	typeref:typename:error
Args	args.go	/^type Args interface {$/;"	i	package:cli
Args	context.go	/^func (c *Context) Args() Args {$/;"	f	unknown:cli.Context	typeref:typename:Args
ArgsUsage	app.go	/^	ArgsUsage string$/;"	m	struct:cli.App	typeref:typename:string
ArgsUsage	command.go	/^	ArgsUsage string$/;"	m	struct:cli.Command	typeref:typename:string
Arguments	docs/v1/manual.md	/^### Arguments$/;"	S
Arguments	docs/v2/manual.md	/^### Arguments$/;"	S
Attribution	CODE_OF_CONDUCT.md	/^## Attribution$/;"	s
Author	app.go	/^type Author struct {$/;"	s	package:cli
Authors	app.go	/^	Authors []*Author$/;"	m	struct:cli.App	typeref:typename:[]*Author
Bash Completion	docs/v1/manual.md	/^### Bash Completion$/;"	S
Bash Completion	docs/v2/manual.md	/^### Bash Completion$/;"	S
BashComplete	app.go	/^	BashComplete BashCompleteFunc$/;"	m	struct:cli.App	typeref:typename:BashCompleteFunc
BashComplete	command.go	/^	BashComplete BashCompleteFunc$/;"	m	struct:cli.Command	typeref:typename:BashCompleteFunc
BashCompleteFunc	funcs.go	/^type BashCompleteFunc func(*Context)$/;"	t	package:cli
BashCompletionFlag	flag.go	/^var BashCompletionFlag Flag = &BoolFlag{$/;"	v	package:cli
Before	app.go	/^	Before BeforeFunc$/;"	m	struct:cli.App	typeref:typename:BeforeFunc
Before	app_test.go	/^	Total, ShellComplete, OnUsageError, Before, CommandNotFound, Action, After, SubCommand int$/;"	m	struct:cli.opCounts	typeref:typename:int
Before	command.go	/^	Before BeforeFunc$/;"	m	struct:cli.Command	typeref:typename:BeforeFunc
BeforeFunc	funcs.go	/^type BeforeFunc func(*Context) error$/;"	t	package:cli
Bool	altsrc/json_source_context.go	/^func (x *jsonSource) Bool(name string) (bool, error) {$/;"	f	unknown:altsrc.jsonSource	typeref:typename:(bool, error)
Bool	altsrc/map_input_source.go	/^func (fsm *MapInputSource) Bool(name string) (bool, error) {$/;"	f	unknown:altsrc.MapInputSource	typeref:typename:(bool, error)
Bool	flag_bool.go	/^func (c *Context) Bool(name string) bool {$/;"	f	unknown:cli.Context	typeref:typename:bool
BoolFlag	altsrc/flag_generated.go	/^	*cli.BoolFlag$/;"	M	struct:altsrc.BoolFlag	typeref:typename:*cli.BoolFlag
BoolFlag	altsrc/flag_generated.go	/^type BoolFlag struct {$/;"	s	package:altsrc
BoolFlag	flag_bool.go	/^type BoolFlag struct {$/;"	s	package:cli
COMMANDS	testdata/expected-doc-full.md	/^# COMMANDS$/;"	c
COMMANDS	testdata/expected-doc-no-authors.md	/^# COMMANDS$/;"	c
COMMANDS	testdata/expected-doc-no-flags.md	/^# COMMANDS$/;"	c
COMPREPLY=	autocomplete/bash_autocomplete	/^    COMPREPLY=()$/;"	f
Categories	category.go	/^func (c *commandCategories) Categories() []CommandCategory {$/;"	f	unknown:cli.commandCategories	typeref:typename:[]CommandCategory
Category	command.go	/^	Category string$/;"	m	struct:cli.Command	typeref:typename:string
Change Log	docs/CHANGELOG.md	/^# Change Log$/;"	c
Changed	docs/CHANGELOG.md	/^### Changed$/;"	S
Checklist	.github/ISSUE_TEMPLATE/v1-bug-report.md	/^## Checklist$/;"	s
Checklist	.github/ISSUE_TEMPLATE/v2-bug-report.md	/^## Checklist$/;"	s
Checklist	.github/ISSUE_TEMPLATE/v2-feature-request.md	/^## Checklist$/;"	s
Choice	flag_choice.go	/^	Choice      Choice$/;"	m	struct:cli.ChoiceFlag	typeref:typename:Choice
Choice	flag_choice.go	/^func (c *Context) Choice(name string) interface{} {$/;"	f	unknown:cli.Context	typeref:typename:interface{}
Choice	flag_choice.go	/^type Choice interface {$/;"	i	package:cli
ChoiceFlag	flag_choice.go	/^type ChoiceFlag struct {$/;"	s	package:cli
Choices	flag_choice.go	/^type Choices map[string]interface{}$/;"	t	package:cli
Combining short options	docs/v1/manual.md	/^### Combining short options$/;"	S
Combining short options	docs/v2/manual.md	/^### Combining short options$/;"	S
Command	app.go	/^func (a *App) Command(name string) *Command {$/;"	f	unknown:cli.App	typeref:typename:*Command
Command	command.go	/^type Command struct {$/;"	s	package:cli
Command	context.go	/^	Command       *Command$/;"	m	struct:cli.Context	typeref:typename:*Command
CommandCategories	category.go	/^type CommandCategories interface {$/;"	i	package:cli
CommandCategory	category.go	/^type CommandCategory interface {$/;"	i	package:cli
CommandHelpTemplate	template.go	/^var CommandHelpTemplate = `NAME:$/;"	v	package:cli
CommandNotFound	app.go	/^	CommandNotFound CommandNotFoundFunc$/;"	m	struct:cli.App	typeref:typename:CommandNotFoundFunc
CommandNotFound	app_test.go	/^	Total, ShellComplete, OnUsageError, Before, CommandNotFound, Action, After, SubCommand int$/;"	m	struct:cli.opCounts	typeref:typename:int
CommandNotFoundFunc	funcs.go	/^type CommandNotFoundFunc func(*Context, string)$/;"	t	package:cli
Commands	app.go	/^	Commands []*Command$/;"	m	struct:cli.App	typeref:typename:[]*Command
Commands	command.go	/^type Commands []*Command$/;"	t	package:cli
Commands	docs.go	/^	Commands     []string$/;"	m	struct:cli.cliTemplate	typeref:typename:[]string
Commands are now lists of pointers	docs/migrate-v1-to-v2.md	/^# Commands are now lists of pointers$/;"	c
CommandsByName	command.go	/^type CommandsByName []*Command$/;"	t	package:cli
Compiled	app.go	/^	Compiled time.Time$/;"	m	struct:cli.App	typeref:typename:time.Time
Completions	fish.go	/^	Completions []string$/;"	m	struct:cli.fishCompletionTemplate	typeref:typename:[]string
Context	context.go	/^	context.Context$/;"	M	struct:cli.Context	typeref:typename:context.Context
Context	context.go	/^type Context struct {$/;"	s	package:cli
ContextValue	altsrc/flag_test.go	/^	ContextValue       flag.Value$/;"	m	struct:altsrc.testApplyInputSource	typeref:typename:flag.Value
ContextValueString	altsrc/flag_test.go	/^	ContextValueString string$/;"	m	struct:altsrc.testApplyInputSource	typeref:typename:string
Contributing	docs/CONTRIBUTING.md	/^## Contributing$/;"	s
Contributor Covenant Code of Conduct	CODE_OF_CONDUCT.md	/^# Contributor Covenant Code of Conduct$/;"	c
Copyright	app.go	/^	Copyright string$/;"	m	struct:cli.App	typeref:typename:string
Custom auto-completion	docs/v2/manual.md	/^#### Custom auto-completion$/;"	t
CustomAppHelpTemplate	app.go	/^	CustomAppHelpTemplate string$/;"	m	struct:cli.App	typeref:typename:string
CustomHelpTemplate	command.go	/^	CustomHelpTemplate string$/;"	m	struct:cli.Command	typeref:typename:string
Customization	docs/v1/manual.md	/^#### Customization$/;"	t
Customization	docs/v2/manual.md	/^#### Customization$/;"	t
DESCRIPTION	testdata/expected-doc-full.md	/^# DESCRIPTION$/;"	c
DESCRIPTION	testdata/expected-doc-no-authors.md	/^# DESCRIPTION$/;"	c
DESCRIPTION	testdata/expected-doc-no-commands.md	/^# DESCRIPTION$/;"	c
DESCRIPTION	testdata/expected-doc-no-flags.md	/^# DESCRIPTION$/;"	c
Default Values for help output	docs/v2/manual.md	/^#### Default Values for help output$/;"	t
Default auto-completion	docs/v2/manual.md	/^#### Default auto-completion$/;"	t
DefaultAppComplete	help.go	/^func DefaultAppComplete(c *Context) {$/;"	f	package:cli
DefaultCompleteWithFlags	help.go	/^func DefaultCompleteWithFlags(cmd *Command) func(c *Context) {$/;"	f	package:cli	typeref:typename:func(c *Context)
DefaultText	flag_bool.go	/^	DefaultText      string$/;"	m	struct:cli.BoolFlag	typeref:typename:string
DefaultText	flag_choice.go	/^	DefaultText string$/;"	m	struct:cli.ChoiceFlag	typeref:typename:string
DefaultText	flag_duration.go	/^	DefaultText string$/;"	m	struct:cli.DurationFlag	typeref:typename:string
DefaultText	flag_float64.go	/^	DefaultText string$/;"	m	struct:cli.Float64Flag	typeref:typename:string
DefaultText	flag_float64_slice.go	/^	DefaultText string$/;"	m	struct:cli.Float64SliceFlag	typeref:typename:string
DefaultText	flag_generic.go	/^	DefaultText string$/;"	m	struct:cli.GenericFlag	typeref:typename:string
DefaultText	flag_int.go	/^	DefaultText string$/;"	m	struct:cli.IntFlag	typeref:typename:string
DefaultText	flag_int64.go	/^	DefaultText string$/;"	m	struct:cli.Int64Flag	typeref:typename:string
DefaultText	flag_int64_slice.go	/^	DefaultText string$/;"	m	struct:cli.Int64SliceFlag	typeref:typename:string
DefaultText	flag_int_slice.go	/^	DefaultText string$/;"	m	struct:cli.IntSliceFlag	typeref:typename:string
DefaultText	flag_path.go	/^	DefaultText string$/;"	m	struct:cli.PathFlag	typeref:typename:string
DefaultText	flag_string.go	/^	DefaultText string$/;"	m	struct:cli.StringFlag	typeref:typename:string
DefaultText	flag_string_slice.go	/^	DefaultText string$/;"	m	struct:cli.StringSliceFlag	typeref:typename:string
DefaultText	flag_timestamp.go	/^	DefaultText string$/;"	m	struct:cli.TimestampFlag	typeref:typename:string
DefaultText	flag_uint.go	/^	DefaultText string$/;"	m	struct:cli.UintFlag	typeref:typename:string
DefaultText	flag_uint64.go	/^	DefaultText string$/;"	m	struct:cli.Uint64Flag	typeref:typename:string
Dependency Management	.github/ISSUE_TEMPLATE/v1-bug-report.md	/^## Dependency Management$/;"	s
Dependency Management	.github/ISSUE_TEMPLATE/v2-bug-report.md	/^## Dependency Management$/;"	s
Deprecated	docs/CHANGELOG.md	/^### Deprecated$/;"	S
Describe alternatives you've considered	.github/ISSUE_TEMPLATE/v2-feature-request.md	/^## Describe alternatives you've considered$/;"	s
Describe the bug	.github/ISSUE_TEMPLATE/v1-bug-report.md	/^## Describe the bug$/;"	s
Describe the bug	.github/ISSUE_TEMPLATE/v2-bug-report.md	/^## Describe the bug$/;"	s
Description	app.go	/^	Description string$/;"	m	struct:cli.App	typeref:typename:string
Description	command.go	/^	Description string$/;"	m	struct:cli.Command	typeref:typename:string
Destination	flag_bool.go	/^	Destination      *bool$/;"	m	struct:cli.BoolFlag	typeref:typename:*bool
Destination	flag_choice.go	/^	Destination interface{}$/;"	m	struct:cli.ChoiceFlag	typeref:typename:interface{}
Destination	flag_duration.go	/^	Destination *time.Duration$/;"	m	struct:cli.DurationFlag	typeref:typename:*time.Duration
Destination	flag_float64.go	/^	Destination *float64$/;"	m	struct:cli.Float64Flag	typeref:typename:*float64
Destination	flag_int.go	/^	Destination *int$/;"	m	struct:cli.IntFlag	typeref:typename:*int
Destination	flag_int64.go	/^	Destination *int64$/;"	m	struct:cli.Int64Flag	typeref:typename:*int64
Destination	flag_path.go	/^	Destination *string$/;"	m	struct:cli.PathFlag	typeref:typename:*string
Destination	flag_string.go	/^	Destination *string$/;"	m	struct:cli.StringFlag	typeref:typename:*string
Destination	flag_string_slice.go	/^	Destination *StringSlice$/;"	m	struct:cli.StringSliceFlag	typeref:typename:*StringSlice
Destination	flag_timestamp.go	/^	Destination *Timestamp$/;"	m	struct:cli.TimestampFlag	typeref:typename:*Timestamp
Destination	flag_uint.go	/^	Destination *uint$/;"	m	struct:cli.UintFlag	typeref:typename:*uint
Destination	flag_uint64.go	/^	Destination *uint64$/;"	m	struct:cli.Uint64Flag	typeref:typename:*uint64
Distribution	docs/v1/manual.md	/^#### Distribution$/;"	t
Distribution and Persistent Autocompletion	docs/v2/manual.md	/^#### Distribution and Persistent Autocompletion$/;"	t
DocGenerationFlag	flag.go	/^type DocGenerationFlag interface {$/;"	i	package:cli
Duration	altsrc/json_source_context.go	/^func (x *jsonSource) Duration(name string) (time.Duration, error) {$/;"	f	unknown:altsrc.jsonSource	typeref:typename:(time.Duration, error)
Duration	altsrc/map_input_source.go	/^func (fsm *MapInputSource) Duration(name string) (time.Duration, error) {$/;"	f	unknown:altsrc.MapInputSource	typeref:typename:(time.Duration, error)
Duration	flag_duration.go	/^func (c *Context) Duration(name string) time.Duration {$/;"	f	unknown:cli.Context	typeref:typename:time.Duration
DurationFlag	altsrc/flag_generated.go	/^	*cli.DurationFlag$/;"	M	struct:altsrc.DurationFlag	typeref:typename:*cli.DurationFlag
DurationFlag	altsrc/flag_generated.go	/^type DurationFlag struct {$/;"	s	package:altsrc
DurationFlag	flag_duration.go	/^type DurationFlag struct {$/;"	s	package:cli
Email	app.go	/^	Email string \/\/ The Authors email$/;"	m	struct:cli.Author	typeref:typename:string
EnableBashCompletion	app.go	/^	EnableBashCompletion bool$/;"	m	struct:cli.App	typeref:typename:bool
Enabling	docs/v1/manual.md	/^#### Enabling$/;"	t
Enabling	docs/v2/manual.md	/^#### Enabling$/;"	t
Enforcement	CODE_OF_CONDUCT.md	/^## Enforcement$/;"	s
EnvVar is now a list (EnvVars)	docs/migrate-v1-to-v2.md	/^# EnvVar is now a list (EnvVars)$/;"	c
EnvVarName	altsrc/flag_test.go	/^	EnvVarName         string$/;"	m	struct:altsrc.testApplyInputSource	typeref:typename:string
EnvVarValue	altsrc/flag_test.go	/^	EnvVarValue        string$/;"	m	struct:altsrc.testApplyInputSource	typeref:typename:string
EnvVars	flag_bool.go	/^	EnvVars          []string$/;"	m	struct:cli.BoolFlag	typeref:typename:[]string
EnvVars	flag_choice.go	/^	EnvVars     []string$/;"	m	struct:cli.ChoiceFlag	typeref:typename:[]string
EnvVars	flag_duration.go	/^	EnvVars     []string$/;"	m	struct:cli.DurationFlag	typeref:typename:[]string
EnvVars	flag_float64.go	/^	EnvVars     []string$/;"	m	struct:cli.Float64Flag	typeref:typename:[]string
EnvVars	flag_float64_slice.go	/^	EnvVars     []string$/;"	m	struct:cli.Float64SliceFlag	typeref:typename:[]string
EnvVars	flag_generic.go	/^	EnvVars     []string$/;"	m	struct:cli.GenericFlag	typeref:typename:[]string
EnvVars	flag_int.go	/^	EnvVars     []string$/;"	m	struct:cli.IntFlag	typeref:typename:[]string
EnvVars	flag_int64.go	/^	EnvVars     []string$/;"	m	struct:cli.Int64Flag	typeref:typename:[]string
EnvVars	flag_int64_slice.go	/^	EnvVars     []string$/;"	m	struct:cli.Int64SliceFlag	typeref:typename:[]string
EnvVars	flag_int_slice.go	/^	EnvVars     []string$/;"	m	struct:cli.IntSliceFlag	typeref:typename:[]string
EnvVars	flag_path.go	/^	EnvVars     []string$/;"	m	struct:cli.PathFlag	typeref:typename:[]string
EnvVars	flag_string.go	/^	EnvVars     []string$/;"	m	struct:cli.StringFlag	typeref:typename:[]string
EnvVars	flag_string_slice.go	/^	EnvVars     []string$/;"	m	struct:cli.StringSliceFlag	typeref:typename:[]string
EnvVars	flag_timestamp.go	/^	EnvVars     []string$/;"	m	struct:cli.TimestampFlag	typeref:typename:[]string
EnvVars	flag_uint.go	/^	EnvVars     []string$/;"	m	struct:cli.UintFlag	typeref:typename:[]string
EnvVars	flag_uint64.go	/^	EnvVars     []string$/;"	m	struct:cli.Uint64Flag	typeref:typename:[]string
ErrWriter	app.go	/^	ErrWriter io.Writer$/;"	m	struct:cli.App	typeref:typename:io.Writer
ErrWriter	errors.go	/^var ErrWriter io.Writer = os.Stderr$/;"	v	package:cli
Error	errors.go	/^func (e *errRequiredFlags) Error() string {$/;"	f	unknown:cli.errRequiredFlags	typeref:typename:string
Error	errors.go	/^func (ee *exitError) Error() string {$/;"	f	unknown:cli.exitError	typeref:typename:string
Error	errors.go	/^func (m *multiError) Error() string {$/;"	f	unknown:cli.multiError	typeref:typename:string
ErrorFormatter	errors.go	/^type ErrorFormatter interface {$/;"	i	package:cli
ErrorWithFormat	errors_test.go	/^type ErrorWithFormat struct {$/;"	s	package:cli
Errors	errors.go	/^func (m *multiError) Errors() []error {$/;"	f	unknown:cli.multiError	typeref:typename:[]error
Everything else	docs/migrate-v1-to-v2.md	/^# Everything else$/;"	c
ExampleApp_Run	app_test.go	/^func ExampleApp_Run() {$/;"	f	package:cli
ExampleApp_Run_appHelp	app_test.go	/^func ExampleApp_Run_appHelp() {$/;"	f	package:cli
ExampleApp_Run_bashComplete	app_test.go	/^func ExampleApp_Run_bashComplete() {$/;"	f	package:cli
ExampleApp_Run_bashComplete_withLongFlag	app_test.go	/^func ExampleApp_Run_bashComplete_withLongFlag() {$/;"	f	package:cli
ExampleApp_Run_bashComplete_withMultipleLongFlag	app_test.go	/^func ExampleApp_Run_bashComplete_withMultipleLongFlag() {$/;"	f	package:cli
ExampleApp_Run_bashComplete_withShortFlag	app_test.go	/^func ExampleApp_Run_bashComplete_withShortFlag() {$/;"	f	package:cli
ExampleApp_Run_commandHelp	app_test.go	/^func ExampleApp_Run_commandHelp() {$/;"	f	package:cli
ExampleApp_Run_noAction	app_test.go	/^func ExampleApp_Run_noAction() {$/;"	f	package:cli
ExampleApp_Run_subcommand	app_test.go	/^func ExampleApp_Run_subcommand() {$/;"	f	package:cli
ExampleApp_Run_subcommandNoAction	app_test.go	/^func ExampleApp_Run_subcommandNoAction() {$/;"	f	package:cli
ExampleApp_Run_zshComplete	app_test.go	/^func ExampleApp_Run_zshComplete() {$/;"	f	package:cli
Examples	docs/v1/manual.md	/^## Examples$/;"	s
Examples	docs/v2/manual.md	/^## Examples$/;"	s
Exit	errors.go	/^func Exit(message interface{}, exitCode int) ExitCoder {$/;"	f	package:cli	typeref:typename:ExitCoder
Exit code	docs/v1/manual.md	/^### Exit code$/;"	S
Exit code	docs/v2/manual.md	/^### Exit code$/;"	S
ExitCode	errors.go	/^func (ee *exitError) ExitCode() int {$/;"	f	unknown:cli.exitError	typeref:typename:int
ExitCoder	errors.go	/^type ExitCoder interface {$/;"	i	package:cli
ExitErrHandler	app.go	/^	ExitErrHandler ExitErrHandlerFunc$/;"	m	struct:cli.App	typeref:typename:ExitErrHandlerFunc
ExitErrHandlerFunc	funcs.go	/^type ExitErrHandlerFunc func(context *Context, err error)$/;"	t	package:cli
Expected	altsrc/flag_test.go	/^	Expected           string$/;"	m	struct:altsrc.testApplyInputSource	typeref:typename:string
Expected behavior	.github/ISSUE_TEMPLATE/v1-bug-report.md	/^## Expected behavior$/;"	s
Expected behavior	.github/ISSUE_TEMPLATE/v2-bug-report.md	/^## Expected behavior$/;"	s
ExtraInfo	app.go	/^	ExtraInfo func() map[string]string$/;"	m	struct:cli.App	typeref:typename:func() map[string]string
FilePath	altsrc/toml_file_loader.go	/^	FilePath string$/;"	m	struct:altsrc.tomlSourceContext	typeref:typename:string
FilePath	altsrc/yaml_file_loader.go	/^	FilePath string$/;"	m	struct:altsrc.yamlSourceContext	typeref:typename:string
FilePath	flag_bool.go	/^	FilePath         string$/;"	m	struct:cli.BoolFlag	typeref:typename:string
FilePath	flag_choice.go	/^	FilePath    string$/;"	m	struct:cli.ChoiceFlag	typeref:typename:string
FilePath	flag_duration.go	/^	FilePath    string$/;"	m	struct:cli.DurationFlag	typeref:typename:string
FilePath	flag_float64.go	/^	FilePath    string$/;"	m	struct:cli.Float64Flag	typeref:typename:string
FilePath	flag_float64_slice.go	/^	FilePath    string$/;"	m	struct:cli.Float64SliceFlag	typeref:typename:string
FilePath	flag_generic.go	/^	FilePath    string$/;"	m	struct:cli.GenericFlag	typeref:typename:string
FilePath	flag_int.go	/^	FilePath    string$/;"	m	struct:cli.IntFlag	typeref:typename:string
FilePath	flag_int64.go	/^	FilePath    string$/;"	m	struct:cli.Int64Flag	typeref:typename:string
FilePath	flag_int64_slice.go	/^	FilePath    string$/;"	m	struct:cli.Int64SliceFlag	typeref:typename:string
FilePath	flag_int_slice.go	/^	FilePath    string$/;"	m	struct:cli.IntSliceFlag	typeref:typename:string
FilePath	flag_path.go	/^	FilePath    string$/;"	m	struct:cli.PathFlag	typeref:typename:string
FilePath	flag_string.go	/^	FilePath    string$/;"	m	struct:cli.StringFlag	typeref:typename:string
FilePath	flag_string_slice.go	/^	FilePath    string$/;"	m	struct:cli.StringSliceFlag	typeref:typename:string
FilePath	flag_timestamp.go	/^	FilePath    string$/;"	m	struct:cli.TimestampFlag	typeref:typename:string
FilePath	flag_uint.go	/^	FilePath    string$/;"	m	struct:cli.UintFlag	typeref:typename:string
FilePath	flag_uint64.go	/^	FilePath    string$/;"	m	struct:cli.Uint64Flag	typeref:typename:string
First	args.go	/^func (a *args) First() string {$/;"	f	unknown:cli.args	typeref:typename:string
FishCompletionTemplate	template.go	/^var FishCompletionTemplate = `# {{ .App.Name }} fish shell completion$/;"	v	package:cli
Fixed	docs/CHANGELOG.md	/^### Fixed$/;"	S
Flag	altsrc/flag_test.go	/^	Flag               FlagInputSourceExtension$/;"	m	struct:altsrc.testApplyInputSource	typeref:typename:FlagInputSourceExtension
Flag	flag.go	/^type Flag interface {$/;"	i	package:cli
Flag aliases are done differently.	docs/migrate-v1-to-v2.md	/^# Flag aliases are done differently.$/;"	c
FlagEnvHintFunc	funcs.go	/^type FlagEnvHintFunc func(envVars []string, str string) string$/;"	t	package:cli
FlagEnvHinter	flag.go	/^var FlagEnvHinter FlagEnvHintFunc = withEnvHint$/;"	v	package:cli
FlagFileHintFunc	funcs.go	/^type FlagFileHintFunc func(filePath, str string) string$/;"	t	package:cli
FlagFileHinter	flag.go	/^var FlagFileHinter FlagFileHintFunc = withFileHint$/;"	v	package:cli
FlagInputSourceExtension	altsrc/flag.go	/^type FlagInputSourceExtension interface {$/;"	i	package:altsrc
FlagName	altsrc/flag_test.go	/^	FlagName           string$/;"	m	struct:altsrc.testApplyInputSource	typeref:typename:string
FlagNamePrefixFunc	funcs.go	/^type FlagNamePrefixFunc func(fullName []string, placeholder string) string$/;"	t	package:cli
FlagNamePrefixer	flag.go	/^var FlagNamePrefixer FlagNamePrefixFunc = prefixedNames$/;"	v	package:cli
FlagNames	context.go	/^func (c *Context) FlagNames() []string {$/;"	f	unknown:cli.Context	typeref:typename:[]string
FlagSetName	altsrc/flag_test.go	/^	FlagSetName        string$/;"	m	struct:altsrc.testApplyInputSource	typeref:typename:string
FlagStringFunc	funcs.go	/^type FlagStringFunc func(Flag) string$/;"	t	package:cli
FlagStringer	flag.go	/^var FlagStringer FlagStringFunc = stringifyFlag$/;"	v	package:cli
Flags	app.go	/^	Flags []Flag$/;"	m	struct:cli.App	typeref:typename:[]Flag
Flags	command.go	/^	Flags []Flag$/;"	m	struct:cli.Command	typeref:typename:[]Flag
Flags	docs/v1/manual.md	/^### Flags$/;"	S
Flags	docs/v2/manual.md	/^### Flags$/;"	S
Flags before args	docs/migrate-v1-to-v2.md	/^# Flags before args$/;"	c
FlagsByName	flag.go	/^type FlagsByName []Flag$/;"	t	package:cli
FlagsStringer	flag.go	/^var FlagsStringer = func(flags []Flag, indent int) []string {$/;"	v	package:cli
Float64	altsrc/json_source_context.go	/^func (x *jsonSource) Float64(name string) (float64, error) {$/;"	f	unknown:altsrc.jsonSource	typeref:typename:(float64, error)
Float64	altsrc/map_input_source.go	/^func (fsm *MapInputSource) Float64(name string) (float64, error) {$/;"	f	unknown:altsrc.MapInputSource	typeref:typename:(float64, error)
Float64	flag_float64.go	/^func (c *Context) Float64(name string) float64 {$/;"	f	unknown:cli.Context	typeref:typename:float64
Float64Flag	altsrc/flag_generated.go	/^	*cli.Float64Flag$/;"	M	struct:altsrc.Float64Flag	typeref:typename:*cli.Float64Flag
Float64Flag	altsrc/flag_generated.go	/^type Float64Flag struct {$/;"	s	package:altsrc
Float64Flag	flag_float64.go	/^type Float64Flag struct {$/;"	s	package:cli
Float64Slice	flag_float64_slice.go	/^func (c *Context) Float64Slice(name string) []float64 {$/;"	f	unknown:cli.Context	typeref:typename:[]float64
Float64Slice	flag_float64_slice.go	/^type Float64Slice struct {$/;"	s	package:cli
Float64SliceFlag	altsrc/flag_generated.go	/^	*cli.Float64SliceFlag$/;"	M	struct:altsrc.Float64SliceFlag	typeref:typename:*cli.Float64SliceFlag
Float64SliceFlag	altsrc/flag_generated.go	/^type Float64SliceFlag struct {$/;"	s	package:altsrc
Float64SliceFlag	flag_float64_slice.go	/^type Float64SliceFlag struct {$/;"	s	package:cli
Format	errors_test.go	/^func (f *ErrorWithFormat) Format(s fmt.State, verb rune) {$/;"	f	unknown:cli.ErrorWithFormat
FromString	flag_choice.go	/^func (c *defaultChoice) FromString(s string) interface{} {$/;"	f	unknown:cli.defaultChoice	typeref:typename:interface{}
Full API Example	docs/v1/manual.md	/^#### Full API Example$/;"	t
Full API Example	docs/v2/manual.md	/^### Full API Example$/;"	S
FullName	command.go	/^func (c *Command) FullName() string {$/;"	f	unknown:cli.Command	typeref:typename:string
GLOBAL OPTIONS	testdata/expected-doc-full.md	/^# GLOBAL OPTIONS$/;"	c
GLOBAL OPTIONS	testdata/expected-doc-no-authors.md	/^# GLOBAL OPTIONS$/;"	c
GLOBAL OPTIONS	testdata/expected-doc-no-commands.md	/^# GLOBAL OPTIONS$/;"	c
GOPATH	README.md	/^### GOPATH$/;"	S
Generated Help Text	docs/v1/manual.md	/^### Generated Help Text$/;"	S
Generated Help Text	docs/v2/manual.md	/^### Generated Help Text$/;"	S
Generic	altsrc/json_source_context.go	/^func (x *jsonSource) Generic(name string) (cli.Generic, error) {$/;"	f	unknown:altsrc.jsonSource	typeref:typename:(cli.Generic, error)
Generic	altsrc/map_input_source.go	/^func (fsm *MapInputSource) Generic(name string) (cli.Generic, error) {$/;"	f	unknown:altsrc.MapInputSource	typeref:typename:(cli.Generic, error)
Generic	flag_generic.go	/^func (c *Context) Generic(name string) interface{} {$/;"	f	unknown:cli.Context	typeref:typename:interface{}
Generic	flag_generic.go	/^type Generic interface {$/;"	i	package:cli
GenericFlag	altsrc/flag_generated.go	/^	*cli.GenericFlag$/;"	M	struct:altsrc.GenericFlag	typeref:typename:*cli.GenericFlag
GenericFlag	altsrc/flag_generated.go	/^type GenericFlag struct {$/;"	s	package:altsrc
GenericFlag	flag_generic.go	/^type GenericFlag struct {$/;"	s	package:cli
Get	args.go	/^func (a *args) Get(n int) string {$/;"	f	unknown:cli.args	typeref:typename:string
Get	flag_choice.go	/^func (c choiceValue) Get() interface{} { return c }$/;"	f	unknown:cli.choiceValue	typeref:typename:interface{}
Get	flag_float64_slice.go	/^func (f *Float64Slice) Get() interface{} {$/;"	f	unknown:cli.Float64Slice	typeref:typename:interface{}
Get	flag_int64_slice.go	/^func (i *Int64Slice) Get() interface{} {$/;"	f	unknown:cli.Int64Slice	typeref:typename:interface{}
Get	flag_int_slice.go	/^func (i *IntSlice) Get() interface{} {$/;"	f	unknown:cli.IntSlice	typeref:typename:interface{}
Get	flag_string_slice.go	/^func (s *StringSlice) Get() interface{} {$/;"	f	unknown:cli.StringSlice	typeref:typename:interface{}
Get	flag_test.go	/^func (p *Parser) Get() interface{} {$/;"	f	unknown:cli.Parser	typeref:typename:interface{}
Get	flag_timestamp.go	/^func (t *Timestamp) Get() interface{} {$/;"	f	unknown:cli.Timestamp	typeref:typename:interface{}
GetUsage	app_test.go	/^func (c *customBoolFlag) GetUsage() string {$/;"	f	unknown:cli.customBoolFlag	typeref:typename:string
GetUsage	flag_bool.go	/^func (f *BoolFlag) GetUsage() string {$/;"	f	unknown:cli.BoolFlag	typeref:typename:string
GetUsage	flag_choice.go	/^func (f *ChoiceFlag) GetUsage() string {$/;"	f	unknown:cli.ChoiceFlag	typeref:typename:string
GetUsage	flag_duration.go	/^func (f *DurationFlag) GetUsage() string {$/;"	f	unknown:cli.DurationFlag	typeref:typename:string
GetUsage	flag_float64.go	/^func (f *Float64Flag) GetUsage() string {$/;"	f	unknown:cli.Float64Flag	typeref:typename:string
GetUsage	flag_float64_slice.go	/^func (f *Float64SliceFlag) GetUsage() string {$/;"	f	unknown:cli.Float64SliceFlag	typeref:typename:string
GetUsage	flag_generic.go	/^func (f *GenericFlag) GetUsage() string {$/;"	f	unknown:cli.GenericFlag	typeref:typename:string
GetUsage	flag_int.go	/^func (f *IntFlag) GetUsage() string {$/;"	f	unknown:cli.IntFlag	typeref:typename:string
GetUsage	flag_int64.go	/^func (f *Int64Flag) GetUsage() string {$/;"	f	unknown:cli.Int64Flag	typeref:typename:string
GetUsage	flag_int64_slice.go	/^func (f Int64SliceFlag) GetUsage() string {$/;"	f	unknown:cli.Int64SliceFlag	typeref:typename:string
GetUsage	flag_int_slice.go	/^func (f IntSliceFlag) GetUsage() string {$/;"	f	unknown:cli.IntSliceFlag	typeref:typename:string
GetUsage	flag_path.go	/^func (f *PathFlag) GetUsage() string {$/;"	f	unknown:cli.PathFlag	typeref:typename:string
GetUsage	flag_string.go	/^func (f *StringFlag) GetUsage() string {$/;"	f	unknown:cli.StringFlag	typeref:typename:string
GetUsage	flag_string_slice.go	/^func (f *StringSliceFlag) GetUsage() string {$/;"	f	unknown:cli.StringSliceFlag	typeref:typename:string
GetUsage	flag_timestamp.go	/^func (f *TimestampFlag) GetUsage() string {$/;"	f	unknown:cli.TimestampFlag	typeref:typename:string
GetUsage	flag_uint.go	/^func (f *UintFlag) GetUsage() string {$/;"	f	unknown:cli.UintFlag	typeref:typename:string
GetUsage	flag_uint64.go	/^func (f *Uint64Flag) GetUsage() string {$/;"	f	unknown:cli.Uint64Flag	typeref:typename:string
GetValue	app_test.go	/^func (c *customBoolFlag) GetValue() string {$/;"	f	unknown:cli.customBoolFlag	typeref:typename:string
GetValue	flag_bool.go	/^func (f *BoolFlag) GetValue() string {$/;"	f	unknown:cli.BoolFlag	typeref:typename:string
GetValue	flag_choice.go	/^func (f *ChoiceFlag) GetValue() string {$/;"	f	unknown:cli.ChoiceFlag	typeref:typename:string
GetValue	flag_duration.go	/^func (f *DurationFlag) GetValue() string {$/;"	f	unknown:cli.DurationFlag	typeref:typename:string
GetValue	flag_float64.go	/^func (f *Float64Flag) GetValue() string {$/;"	f	unknown:cli.Float64Flag	typeref:typename:string
GetValue	flag_float64_slice.go	/^func (f *Float64SliceFlag) GetValue() string {$/;"	f	unknown:cli.Float64SliceFlag	typeref:typename:string
GetValue	flag_generic.go	/^func (f *GenericFlag) GetValue() string {$/;"	f	unknown:cli.GenericFlag	typeref:typename:string
GetValue	flag_int.go	/^func (f *IntFlag) GetValue() string {$/;"	f	unknown:cli.IntFlag	typeref:typename:string
GetValue	flag_int64.go	/^func (f *Int64Flag) GetValue() string {$/;"	f	unknown:cli.Int64Flag	typeref:typename:string
GetValue	flag_int64_slice.go	/^func (f *Int64SliceFlag) GetValue() string {$/;"	f	unknown:cli.Int64SliceFlag	typeref:typename:string
GetValue	flag_int_slice.go	/^func (f *IntSliceFlag) GetValue() string {$/;"	f	unknown:cli.IntSliceFlag	typeref:typename:string
GetValue	flag_path.go	/^func (f *PathFlag) GetValue() string {$/;"	f	unknown:cli.PathFlag	typeref:typename:string
GetValue	flag_string.go	/^func (f *StringFlag) GetValue() string {$/;"	f	unknown:cli.StringFlag	typeref:typename:string
GetValue	flag_string_slice.go	/^func (f *StringSliceFlag) GetValue() string {$/;"	f	unknown:cli.StringSliceFlag	typeref:typename:string
GetValue	flag_timestamp.go	/^func (f *TimestampFlag) GetValue() string {$/;"	f	unknown:cli.TimestampFlag	typeref:typename:string
GetValue	flag_uint.go	/^func (f *UintFlag) GetValue() string {$/;"	f	unknown:cli.UintFlag	typeref:typename:string
GetValue	flag_uint64.go	/^func (f *Uint64Flag) GetValue() string {$/;"	f	unknown:cli.Uint64Flag	typeref:typename:string
Getting Started	docs/v1/manual.md	/^## Getting Started$/;"	s
Getting Started	docs/v2/manual.md	/^## Getting Started$/;"	s
GlobalArgs	docs.go	/^	GlobalArgs   []string$/;"	m	struct:cli.cliTemplate	typeref:typename:[]string
HandleAction	app.go	/^func HandleAction(action interface{}, context *Context) (err error) {$/;"	f	package:cli	typeref:typename:(err error)
HandleExitCoder	errors.go	/^func HandleExitCoder(err error) {$/;"	f	package:cli
HasBeenSet	flag_bool.go	/^	HasBeenSet       bool$/;"	m	struct:cli.BoolFlag	typeref:typename:bool
HasBeenSet	flag_choice.go	/^	HasBeenSet  bool$/;"	m	struct:cli.ChoiceFlag	typeref:typename:bool
HasBeenSet	flag_duration.go	/^	HasBeenSet  bool$/;"	m	struct:cli.DurationFlag	typeref:typename:bool
HasBeenSet	flag_float64.go	/^	HasBeenSet  bool$/;"	m	struct:cli.Float64Flag	typeref:typename:bool
HasBeenSet	flag_float64_slice.go	/^	HasBeenSet  bool$/;"	m	struct:cli.Float64SliceFlag	typeref:typename:bool
HasBeenSet	flag_generic.go	/^	HasBeenSet  bool$/;"	m	struct:cli.GenericFlag	typeref:typename:bool
HasBeenSet	flag_int.go	/^	HasBeenSet  bool$/;"	m	struct:cli.IntFlag	typeref:typename:bool
HasBeenSet	flag_int64.go	/^	HasBeenSet  bool$/;"	m	struct:cli.Int64Flag	typeref:typename:bool
HasBeenSet	flag_int64_slice.go	/^	HasBeenSet  bool$/;"	m	struct:cli.Int64SliceFlag	typeref:typename:bool
HasBeenSet	flag_int_slice.go	/^	HasBeenSet  bool$/;"	m	struct:cli.IntSliceFlag	typeref:typename:bool
HasBeenSet	flag_path.go	/^	HasBeenSet  bool$/;"	m	struct:cli.PathFlag	typeref:typename:bool
HasBeenSet	flag_string.go	/^	HasBeenSet  bool$/;"	m	struct:cli.StringFlag	typeref:typename:bool
HasBeenSet	flag_string_slice.go	/^	HasBeenSet  bool$/;"	m	struct:cli.StringSliceFlag	typeref:typename:bool
HasBeenSet	flag_timestamp.go	/^	HasBeenSet  bool$/;"	m	struct:cli.TimestampFlag	typeref:typename:bool
HasBeenSet	flag_uint.go	/^	HasBeenSet  bool$/;"	m	struct:cli.UintFlag	typeref:typename:bool
HasBeenSet	flag_uint64.go	/^	HasBeenSet  bool$/;"	m	struct:cli.Uint64Flag	typeref:typename:bool
HasName	command.go	/^func (c *Command) HasName(name string) bool {$/;"	f	unknown:cli.Command	typeref:typename:bool
HelpFlag	flag.go	/^var HelpFlag Flag = &BoolFlag{$/;"	v	package:cli
HelpName	app.go	/^	HelpName string$/;"	m	struct:cli.App	typeref:typename:string
HelpName	command.go	/^	HelpName        string$/;"	m	struct:cli.Command	typeref:typename:string
HelpPrinter	help.go	/^var HelpPrinter helpPrinter = printHelp$/;"	v	package:cli
HelpPrinterCustom	help.go	/^var HelpPrinterCustom helpPrinterCustom = printHelpCustom$/;"	v	package:cli
HelpWrapAt	help.go	/^var HelpWrapAt = 80$/;"	v	package:cli
Hidden	command.go	/^	Hidden bool$/;"	m	struct:cli.Command	typeref:typename:bool
Hidden	flag_bool.go	/^	Hidden           bool$/;"	m	struct:cli.BoolFlag	typeref:typename:bool
Hidden	flag_choice.go	/^	Hidden      bool$/;"	m	struct:cli.ChoiceFlag	typeref:typename:bool
Hidden	flag_duration.go	/^	Hidden      bool$/;"	m	struct:cli.DurationFlag	typeref:typename:bool
Hidden	flag_float64.go	/^	Hidden      bool$/;"	m	struct:cli.Float64Flag	typeref:typename:bool
Hidden	flag_float64_slice.go	/^	Hidden      bool$/;"	m	struct:cli.Float64SliceFlag	typeref:typename:bool
Hidden	flag_generic.go	/^	Hidden      bool$/;"	m	struct:cli.GenericFlag	typeref:typename:bool
Hidden	flag_int.go	/^	Hidden      bool$/;"	m	struct:cli.IntFlag	typeref:typename:bool
Hidden	flag_int64.go	/^	Hidden      bool$/;"	m	struct:cli.Int64Flag	typeref:typename:bool
Hidden	flag_int64_slice.go	/^	Hidden      bool$/;"	m	struct:cli.Int64SliceFlag	typeref:typename:bool
Hidden	flag_int_slice.go	/^	Hidden      bool$/;"	m	struct:cli.IntSliceFlag	typeref:typename:bool
Hidden	flag_path.go	/^	Hidden      bool$/;"	m	struct:cli.PathFlag	typeref:typename:bool
Hidden	flag_string.go	/^	Hidden      bool$/;"	m	struct:cli.StringFlag	typeref:typename:bool
Hidden	flag_string_slice.go	/^	Hidden      bool$/;"	m	struct:cli.StringSliceFlag	typeref:typename:bool
Hidden	flag_timestamp.go	/^	Hidden      bool$/;"	m	struct:cli.TimestampFlag	typeref:typename:bool
Hidden	flag_uint.go	/^	Hidden      bool$/;"	m	struct:cli.UintFlag	typeref:typename:bool
Hidden	flag_uint64.go	/^	Hidden      bool$/;"	m	struct:cli.Uint64Flag	typeref:typename:bool
HideDefaultValue	flag_bool.go	/^	HideDefaultValue bool$/;"	m	struct:cli.BoolFlag	typeref:typename:bool
HideHelp	app.go	/^	HideHelp bool$/;"	m	struct:cli.App	typeref:typename:bool
HideHelp	command.go	/^	HideHelp bool$/;"	m	struct:cli.Command	typeref:typename:bool
HideHelpCommand	app.go	/^	HideHelpCommand bool$/;"	m	struct:cli.App	typeref:typename:bool
HideHelpCommand	command.go	/^	HideHelpCommand bool$/;"	m	struct:cli.Command	typeref:typename:bool
HideVersion	app.go	/^	HideVersion bool$/;"	m	struct:cli.App	typeref:typename:bool
Import string changed	docs/migrate-v1-to-v2.md	/^# Import string changed$/;"	c
InitInputSource	altsrc/flag.go	/^func InitInputSource(flags []cli.Flag, createInputSource func() (InputSourceContext, error)) cli/;"	f	package:altsrc	typeref:typename:cli.BeforeFunc
InitInputSourceWithContext	altsrc/flag.go	/^func InitInputSourceWithContext(flags []cli.Flag, createInputSource func(context *cli.Context) (/;"	f	package:altsrc	typeref:typename:cli.BeforeFunc
InputSourceContext	altsrc/input_source_context.go	/^type InputSourceContext interface {$/;"	i	package:altsrc
Installation	README.md	/^## Installation$/;"	s
Int	altsrc/json_source_context.go	/^func (x *jsonSource) Int(name string) (int, error) {$/;"	f	unknown:altsrc.jsonSource	typeref:typename:(int, error)
Int	altsrc/map_input_source.go	/^func (fsm *MapInputSource) Int(name string) (int, error) {$/;"	f	unknown:altsrc.MapInputSource	typeref:typename:(int, error)
Int	flag_int.go	/^func (c *Context) Int(name string) int {$/;"	f	unknown:cli.Context	typeref:typename:int
Int64	flag_int64.go	/^func (c *Context) Int64(name string) int64 {$/;"	f	unknown:cli.Context	typeref:typename:int64
Int64Flag	altsrc/flag_generated.go	/^	*cli.Int64Flag$/;"	M	struct:altsrc.Int64Flag	typeref:typename:*cli.Int64Flag
Int64Flag	altsrc/flag_generated.go	/^type Int64Flag struct {$/;"	s	package:altsrc
Int64Flag	flag_int64.go	/^type Int64Flag struct {$/;"	s	package:cli
Int64Slice	flag_int64_slice.go	/^func (c *Context) Int64Slice(name string) []int64 {$/;"	f	unknown:cli.Context	typeref:typename:[]int64
Int64Slice	flag_int64_slice.go	/^type Int64Slice struct {$/;"	s	package:cli
Int64SliceFlag	altsrc/flag_generated.go	/^	*cli.Int64SliceFlag$/;"	M	struct:altsrc.Int64SliceFlag	typeref:typename:*cli.Int64SliceFlag
Int64SliceFlag	altsrc/flag_generated.go	/^type Int64SliceFlag struct {$/;"	s	package:altsrc
Int64SliceFlag	flag_int64_slice.go	/^type Int64SliceFlag struct {$/;"	s	package:cli
IntFlag	altsrc/flag_generated.go	/^	*cli.IntFlag$/;"	M	struct:altsrc.IntFlag	typeref:typename:*cli.IntFlag
IntFlag	altsrc/flag_generated.go	/^type IntFlag struct {$/;"	s	package:altsrc
IntFlag	flag_int.go	/^type IntFlag struct {$/;"	s	package:cli
IntSlice	altsrc/json_source_context.go	/^func (x *jsonSource) IntSlice(name string) ([]int, error) {$/;"	f	unknown:altsrc.jsonSource	typeref:typename:([]int, error)
IntSlice	altsrc/map_input_source.go	/^func (fsm *MapInputSource) IntSlice(name string) ([]int, error) {$/;"	f	unknown:altsrc.MapInputSource	typeref:typename:([]int, error)
IntSlice	flag_int_slice.go	/^func (c *Context) IntSlice(name string) []int {$/;"	f	unknown:cli.Context	typeref:typename:[]int
IntSlice	flag_int_slice.go	/^type IntSlice struct {$/;"	s	package:cli
IntSliceFlag	altsrc/flag_generated.go	/^	*cli.IntSliceFlag$/;"	M	struct:altsrc.IntSliceFlag	typeref:typename:*cli.IntSliceFlag
IntSliceFlag	altsrc/flag_generated.go	/^type IntSliceFlag struct {$/;"	s	package:altsrc
IntSliceFlag	flag_int_slice.go	/^type IntSliceFlag struct {$/;"	s	package:cli
IsRequired	flag_bool.go	/^func (f *BoolFlag) IsRequired() bool {$/;"	f	unknown:cli.BoolFlag	typeref:typename:bool
IsRequired	flag_choice.go	/^func (f *ChoiceFlag) IsRequired() bool {$/;"	f	unknown:cli.ChoiceFlag	typeref:typename:bool
IsRequired	flag_duration.go	/^func (f *DurationFlag) IsRequired() bool {$/;"	f	unknown:cli.DurationFlag	typeref:typename:bool
IsRequired	flag_float64.go	/^func (f *Float64Flag) IsRequired() bool {$/;"	f	unknown:cli.Float64Flag	typeref:typename:bool
IsRequired	flag_float64_slice.go	/^func (f *Float64SliceFlag) IsRequired() bool {$/;"	f	unknown:cli.Float64SliceFlag	typeref:typename:bool
IsRequired	flag_generic.go	/^func (f *GenericFlag) IsRequired() bool {$/;"	f	unknown:cli.GenericFlag	typeref:typename:bool
IsRequired	flag_int.go	/^func (f *IntFlag) IsRequired() bool {$/;"	f	unknown:cli.IntFlag	typeref:typename:bool
IsRequired	flag_int64.go	/^func (f *Int64Flag) IsRequired() bool {$/;"	f	unknown:cli.Int64Flag	typeref:typename:bool
IsRequired	flag_int64_slice.go	/^func (f *Int64SliceFlag) IsRequired() bool {$/;"	f	unknown:cli.Int64SliceFlag	typeref:typename:bool
IsRequired	flag_int_slice.go	/^func (f *IntSliceFlag) IsRequired() bool {$/;"	f	unknown:cli.IntSliceFlag	typeref:typename:bool
IsRequired	flag_path.go	/^func (f *PathFlag) IsRequired() bool {$/;"	f	unknown:cli.PathFlag	typeref:typename:bool
IsRequired	flag_string.go	/^func (f *StringFlag) IsRequired() bool {$/;"	f	unknown:cli.StringFlag	typeref:typename:bool
IsRequired	flag_string_slice.go	/^func (f *StringSliceFlag) IsRequired() bool {$/;"	f	unknown:cli.StringSliceFlag	typeref:typename:bool
IsRequired	flag_timestamp.go	/^func (f *TimestampFlag) IsRequired() bool {$/;"	f	unknown:cli.TimestampFlag	typeref:typename:bool
IsRequired	flag_uint.go	/^func (f *UintFlag) IsRequired() bool {$/;"	f	unknown:cli.UintFlag	typeref:typename:bool
IsRequired	flag_uint64.go	/^func (f *Uint64Flag) IsRequired() bool {$/;"	f	unknown:cli.Uint64Flag	typeref:typename:bool
IsSet	app_test.go	/^func (c *customBoolFlag) IsSet() bool {$/;"	f	unknown:cli.customBoolFlag	typeref:typename:bool
IsSet	context.go	/^func (c *Context) IsSet(name string) bool {$/;"	f	unknown:cli.Context	typeref:typename:bool
IsSet	flag_bool.go	/^func (f *BoolFlag) IsSet() bool {$/;"	f	unknown:cli.BoolFlag	typeref:typename:bool
IsSet	flag_choice.go	/^func (f *ChoiceFlag) IsSet() bool {$/;"	f	unknown:cli.ChoiceFlag	typeref:typename:bool
IsSet	flag_duration.go	/^func (f *DurationFlag) IsSet() bool {$/;"	f	unknown:cli.DurationFlag	typeref:typename:bool
IsSet	flag_float64.go	/^func (f *Float64Flag) IsSet() bool {$/;"	f	unknown:cli.Float64Flag	typeref:typename:bool
IsSet	flag_float64_slice.go	/^func (f *Float64SliceFlag) IsSet() bool {$/;"	f	unknown:cli.Float64SliceFlag	typeref:typename:bool
IsSet	flag_generic.go	/^func (f *GenericFlag) IsSet() bool {$/;"	f	unknown:cli.GenericFlag	typeref:typename:bool
IsSet	flag_int.go	/^func (f *IntFlag) IsSet() bool {$/;"	f	unknown:cli.IntFlag	typeref:typename:bool
IsSet	flag_int64.go	/^func (f *Int64Flag) IsSet() bool {$/;"	f	unknown:cli.Int64Flag	typeref:typename:bool
IsSet	flag_int64_slice.go	/^func (f *Int64SliceFlag) IsSet() bool {$/;"	f	unknown:cli.Int64SliceFlag	typeref:typename:bool
IsSet	flag_int_slice.go	/^func (f *IntSliceFlag) IsSet() bool {$/;"	f	unknown:cli.IntSliceFlag	typeref:typename:bool
IsSet	flag_path.go	/^func (f *PathFlag) IsSet() bool {$/;"	f	unknown:cli.PathFlag	typeref:typename:bool
IsSet	flag_string.go	/^func (f *StringFlag) IsSet() bool {$/;"	f	unknown:cli.StringFlag	typeref:typename:bool
IsSet	flag_string_slice.go	/^func (f *StringSliceFlag) IsSet() bool {$/;"	f	unknown:cli.StringSliceFlag	typeref:typename:bool
IsSet	flag_timestamp.go	/^func (f *TimestampFlag) IsSet() bool {$/;"	f	unknown:cli.TimestampFlag	typeref:typename:bool
IsSet	flag_uint.go	/^func (f *UintFlag) IsSet() bool {$/;"	f	unknown:cli.UintFlag	typeref:typename:bool
IsSet	flag_uint64.go	/^func (f *Uint64Flag) IsSet() bool {$/;"	f	unknown:cli.Uint64Flag	typeref:typename:bool
IsVisible	flag_bool.go	/^func (f *BoolFlag) IsVisible() bool {$/;"	f	unknown:cli.BoolFlag	typeref:typename:bool
IsVisible	flag_choice.go	/^func (f *ChoiceFlag) IsVisible() bool {$/;"	f	unknown:cli.ChoiceFlag	typeref:typename:bool
IsVisible	flag_duration.go	/^func (f *DurationFlag) IsVisible() bool {$/;"	f	unknown:cli.DurationFlag	typeref:typename:bool
IsVisible	flag_float64.go	/^func (f *Float64Flag) IsVisible() bool {$/;"	f	unknown:cli.Float64Flag	typeref:typename:bool
IsVisible	flag_float64_slice.go	/^func (f *Float64SliceFlag) IsVisible() bool {$/;"	f	unknown:cli.Float64SliceFlag	typeref:typename:bool
IsVisible	flag_generic.go	/^func (f *GenericFlag) IsVisible() bool {$/;"	f	unknown:cli.GenericFlag	typeref:typename:bool
IsVisible	flag_int.go	/^func (f *IntFlag) IsVisible() bool {$/;"	f	unknown:cli.IntFlag	typeref:typename:bool
IsVisible	flag_int64.go	/^func (f *Int64Flag) IsVisible() bool {$/;"	f	unknown:cli.Int64Flag	typeref:typename:bool
IsVisible	flag_int64_slice.go	/^func (f *Int64SliceFlag) IsVisible() bool {$/;"	f	unknown:cli.Int64SliceFlag	typeref:typename:bool
IsVisible	flag_int_slice.go	/^func (f *IntSliceFlag) IsVisible() bool {$/;"	f	unknown:cli.IntSliceFlag	typeref:typename:bool
IsVisible	flag_path.go	/^func (f *PathFlag) IsVisible() bool {$/;"	f	unknown:cli.PathFlag	typeref:typename:bool
IsVisible	flag_string.go	/^func (f *StringFlag) IsVisible() bool {$/;"	f	unknown:cli.StringFlag	typeref:typename:bool
IsVisible	flag_string_slice.go	/^func (f *StringSliceFlag) IsVisible() bool {$/;"	f	unknown:cli.StringSliceFlag	typeref:typename:bool
IsVisible	flag_timestamp.go	/^func (f *TimestampFlag) IsVisible() bool {$/;"	f	unknown:cli.TimestampFlag	typeref:typename:bool
IsVisible	flag_uint.go	/^func (f *UintFlag) IsVisible() bool {$/;"	f	unknown:cli.UintFlag	typeref:typename:bool
IsVisible	flag_uint64.go	/^func (f *Uint64Flag) IsVisible() bool {$/;"	f	unknown:cli.Uint64Flag	typeref:typename:bool
Layout	flag_timestamp.go	/^	Layout      string$/;"	m	struct:cli.TimestampFlag	typeref:typename:string
Len	args.go	/^func (a *args) Len() int {$/;"	f	unknown:cli.args	typeref:typename:int
Len	category.go	/^func (c *commandCategories) Len() int {$/;"	f	unknown:cli.commandCategories	typeref:typename:int
Len	command.go	/^func (c CommandsByName) Len() int {$/;"	f	unknown:cli.CommandsByName	typeref:typename:int
Len	flag.go	/^func (f FlagsByName) Len() int {$/;"	f	unknown:cli.FlagsByName	typeref:typename:int
Less	category.go	/^func (c *commandCategories) Less(i, j int) bool {$/;"	f	unknown:cli.commandCategories	typeref:typename:bool
Less	command.go	/^func (c CommandsByName) Less(i, j int) bool {$/;"	f	unknown:cli.CommandsByName	typeref:typename:bool
Less	flag.go	/^func (f FlagsByName) Less(i, j int) bool {$/;"	f	unknown:cli.FlagsByName	typeref:typename:bool
Lineage	context.go	/^func (c *Context) Lineage() []*Context {$/;"	f	unknown:cli.Context	typeref:typename:[]*Context
Lists of commands should be pointers	docs/migrate-v1-to-v2.md	/^# Lists of commands should be pointers$/;"	c
LocalFlagNames	context.go	/^func (c *Context) LocalFlagNames() []string {$/;"	f	unknown:cli.Context	typeref:typename:[]string
Map	altsrc/toml_file_loader.go	/^	Map map[interface{}]interface{}$/;"	m	struct:altsrc.tomlMap	typeref:typename:map[interface{}]interface{}
MapInputSource	altsrc/map_input_source.go	/^type MapInputSource struct {$/;"	s	package:altsrc
MapValue	altsrc/flag_test.go	/^	MapValue           interface{}$/;"	m	struct:altsrc.testApplyInputSource	typeref:typename:interface{}
MarkdownDocTemplate	template.go	/^var MarkdownDocTemplate = `% {{ .App.Name }} {{ .SectionNum }}$/;"	v	package:cli
Metadata	app.go	/^	Metadata map[string]interface{}$/;"	m	struct:cli.App	typeref:typename:map[string]interface{}
Migrating From Older Releases	docs/v2/manual.md	/^## Migrating From Older Releases$/;"	s
Migrating to V2	docs/v1/manual.md	/^## Migrating to V2$/;"	s
Migration Guide: v1 to v2	docs/migrate-v1-to-v2.md	/^Migration Guide: v1 to v2$/;"	c
MultiError	errors.go	/^type MultiError interface {$/;"	i	package:cli
NAME	testdata/expected-doc-full.md	/^# NAME$/;"	c
NAME	testdata/expected-doc-no-authors.md	/^# NAME$/;"	c
NAME	testdata/expected-doc-no-commands.md	/^# NAME$/;"	c
NAME	testdata/expected-doc-no-flags.md	/^# NAME$/;"	c
NArg	context.go	/^func (c *Context) NArg() int {$/;"	f	unknown:cli.Context	typeref:typename:int
Name	app.go	/^	Name  string \/\/ The Authors name$/;"	m	struct:cli.Author	typeref:typename:string
Name	app.go	/^	Name string$/;"	m	struct:cli.App	typeref:typename:string
Name	category.go	/^func (c *commandCategory) Name() string {$/;"	f	unknown:cli.commandCategory	typeref:typename:string
Name	command.go	/^	Name string$/;"	m	struct:cli.Command	typeref:typename:string
Name	flag_bool.go	/^	Name             string$/;"	m	struct:cli.BoolFlag	typeref:typename:string
Name	flag_choice.go	/^	Name        string$/;"	m	struct:cli.ChoiceFlag	typeref:typename:string
Name	flag_duration.go	/^	Name        string$/;"	m	struct:cli.DurationFlag	typeref:typename:string
Name	flag_float64.go	/^	Name        string$/;"	m	struct:cli.Float64Flag	typeref:typename:string
Name	flag_float64_slice.go	/^	Name        string$/;"	m	struct:cli.Float64SliceFlag	typeref:typename:string
Name	flag_generic.go	/^	Name        string$/;"	m	struct:cli.GenericFlag	typeref:typename:string
Name	flag_int.go	/^	Name        string$/;"	m	struct:cli.IntFlag	typeref:typename:string
Name	flag_int64.go	/^	Name        string$/;"	m	struct:cli.Int64Flag	typeref:typename:string
Name	flag_int64_slice.go	/^	Name        string$/;"	m	struct:cli.Int64SliceFlag	typeref:typename:string
Name	flag_int_slice.go	/^	Name        string$/;"	m	struct:cli.IntSliceFlag	typeref:typename:string
Name	flag_path.go	/^	Name        string$/;"	m	struct:cli.PathFlag	typeref:typename:string
Name	flag_string.go	/^	Name        string$/;"	m	struct:cli.StringFlag	typeref:typename:string
Name	flag_string_slice.go	/^	Name        string$/;"	m	struct:cli.StringSliceFlag	typeref:typename:string
Name	flag_timestamp.go	/^	Name        string$/;"	m	struct:cli.TimestampFlag	typeref:typename:string
Name	flag_uint.go	/^	Name        string$/;"	m	struct:cli.UintFlag	typeref:typename:string
Name	flag_uint64.go	/^	Name        string$/;"	m	struct:cli.Uint64Flag	typeref:typename:string
Names	app_test.go	/^func (c *customBoolFlag) Names() []string {$/;"	f	unknown:cli.customBoolFlag	typeref:typename:[]string
Names	command.go	/^func (c *Command) Names() []string {$/;"	f	unknown:cli.Command	typeref:typename:[]string
Names	flag_bool.go	/^func (f *BoolFlag) Names() []string {$/;"	f	unknown:cli.BoolFlag	typeref:typename:[]string
Names	flag_choice.go	/^func (f *ChoiceFlag) Names() []string {$/;"	f	unknown:cli.ChoiceFlag	typeref:typename:[]string
Names	flag_duration.go	/^func (f *DurationFlag) Names() []string {$/;"	f	unknown:cli.DurationFlag	typeref:typename:[]string
Names	flag_float64.go	/^func (f *Float64Flag) Names() []string {$/;"	f	unknown:cli.Float64Flag	typeref:typename:[]string
Names	flag_float64_slice.go	/^func (f *Float64SliceFlag) Names() []string {$/;"	f	unknown:cli.Float64SliceFlag	typeref:typename:[]string
Names	flag_generic.go	/^func (f *GenericFlag) Names() []string {$/;"	f	unknown:cli.GenericFlag	typeref:typename:[]string
Names	flag_int.go	/^func (f *IntFlag) Names() []string {$/;"	f	unknown:cli.IntFlag	typeref:typename:[]string
Names	flag_int64.go	/^func (f *Int64Flag) Names() []string {$/;"	f	unknown:cli.Int64Flag	typeref:typename:[]string
Names	flag_int64_slice.go	/^func (f *Int64SliceFlag) Names() []string {$/;"	f	unknown:cli.Int64SliceFlag	typeref:typename:[]string
Names	flag_int_slice.go	/^func (f *IntSliceFlag) Names() []string {$/;"	f	unknown:cli.IntSliceFlag	typeref:typename:[]string
Names	flag_path.go	/^func (f *PathFlag) Names() []string {$/;"	f	unknown:cli.PathFlag	typeref:typename:[]string
Names	flag_string.go	/^func (f *StringFlag) Names() []string {$/;"	f	unknown:cli.StringFlag	typeref:typename:[]string
Names	flag_string_slice.go	/^func (f *StringSliceFlag) Names() []string {$/;"	f	unknown:cli.StringSliceFlag	typeref:typename:[]string
Names	flag_timestamp.go	/^func (f *TimestampFlag) Names() []string {$/;"	f	unknown:cli.TimestampFlag	typeref:typename:[]string
Names	flag_uint.go	/^func (f *UintFlag) Names() []string {$/;"	f	unknown:cli.UintFlag	typeref:typename:[]string
Names	flag_uint64.go	/^func (f *Uint64Flag) Names() []string {$/;"	f	unknown:cli.Uint64Flag	typeref:typename:[]string
NewApp	app.go	/^func NewApp() *App {$/;"	f	package:cli	typeref:typename:*App
NewBoolFlag	altsrc/flag_generated.go	/^func NewBoolFlag(fl *cli.BoolFlag) *BoolFlag {$/;"	f	package:altsrc	typeref:typename:*BoolFlag
NewChoice	flag_choice.go	/^func NewChoice(v Choices) Choice {$/;"	f	package:cli	typeref:typename:Choice
NewContext	context.go	/^func NewContext(app *App, set *flag.FlagSet, parentCtx *Context) *Context {$/;"	f	package:cli	typeref:typename:*Context
NewDurationFlag	altsrc/flag_generated.go	/^func NewDurationFlag(fl *cli.DurationFlag) *DurationFlag {$/;"	f	package:altsrc	typeref:typename:*DurationFlag
NewErrorWithFormat	errors_test.go	/^func NewErrorWithFormat(m string) *ErrorWithFormat {$/;"	f	package:cli	typeref:typename:*ErrorWithFormat
NewExitError	errors.go	/^func NewExitError(message interface{}, exitCode int) ExitCoder {$/;"	f	package:cli	typeref:typename:ExitCoder
NewFloat64Flag	altsrc/flag_generated.go	/^func NewFloat64Flag(fl *cli.Float64Flag) *Float64Flag {$/;"	f	package:altsrc	typeref:typename:*Float64Flag
NewFloat64Slice	flag_float64_slice.go	/^func NewFloat64Slice(defaults ...float64) *Float64Slice {$/;"	f	package:cli	typeref:typename:*Float64Slice
NewFloat64SliceFlag	altsrc/flag_generated.go	/^func NewFloat64SliceFlag(fl *cli.Float64SliceFlag) *Float64SliceFlag {$/;"	f	package:altsrc	typeref:typename:*Float64SliceFlag
NewGenericFlag	altsrc/flag_generated.go	/^func NewGenericFlag(fl *cli.GenericFlag) *GenericFlag {$/;"	f	package:altsrc	typeref:typename:*GenericFlag
NewInt64Flag	altsrc/flag_generated.go	/^func NewInt64Flag(fl *cli.Int64Flag) *Int64Flag {$/;"	f	package:altsrc	typeref:typename:*Int64Flag
NewInt64Slice	flag_int64_slice.go	/^func NewInt64Slice(defaults ...int64) *Int64Slice {$/;"	f	package:cli	typeref:typename:*Int64Slice
NewInt64SliceFlag	altsrc/flag_generated.go	/^func NewInt64SliceFlag(fl *cli.Int64SliceFlag) *Int64SliceFlag {$/;"	f	package:altsrc	typeref:typename:*Int64SliceFlag
NewIntFlag	altsrc/flag_generated.go	/^func NewIntFlag(fl *cli.IntFlag) *IntFlag {$/;"	f	package:altsrc	typeref:typename:*IntFlag
NewIntSlice	flag_int_slice.go	/^func NewIntSlice(defaults ...int) *IntSlice {$/;"	f	package:cli	typeref:typename:*IntSlice
NewIntSliceFlag	altsrc/flag_generated.go	/^func NewIntSliceFlag(fl *cli.IntSliceFlag) *IntSliceFlag {$/;"	f	package:altsrc	typeref:typename:*IntSliceFlag
NewJSONSource	altsrc/json_source_context.go	/^func NewJSONSource(data []byte) (InputSourceContext, error) {$/;"	f	package:altsrc	typeref:typename:(InputSourceContext, error)
NewJSONSourceFromFile	altsrc/json_source_context.go	/^func NewJSONSourceFromFile(f string) (InputSourceContext, error) {$/;"	f	package:altsrc	typeref:typename:(InputSourceContext, error)
NewJSONSourceFromFlagFunc	altsrc/json_source_context.go	/^func NewJSONSourceFromFlagFunc(flag string) func(c *cli.Context) (InputSourceContext, error) {$/;"	f	package:altsrc	typeref:typename:func(c *cli.Context) (InputSourceContext, error)
NewJSONSourceFromReader	altsrc/json_source_context.go	/^func NewJSONSourceFromReader(r io.Reader) (InputSourceContext, error) {$/;"	f	package:altsrc	typeref:typename:(InputSourceContext, error)
NewMapInputSource	altsrc/map_input_source.go	/^func NewMapInputSource(file string, valueMap map[interface{}]interface{}) *MapInputSource {$/;"	f	package:altsrc	typeref:typename:*MapInputSource
NewPathFlag	altsrc/flag_generated.go	/^func NewPathFlag(fl *cli.PathFlag) *PathFlag {$/;"	f	package:altsrc	typeref:typename:*PathFlag
NewStringChoice	flag_choice.go	/^func NewStringChoice(ss ...string) Choice {$/;"	f	package:cli	typeref:typename:Choice
NewStringFlag	altsrc/flag_generated.go	/^func NewStringFlag(fl *cli.StringFlag) *StringFlag {$/;"	f	package:altsrc	typeref:typename:*StringFlag
NewStringSlice	flag_string_slice.go	/^func NewStringSlice(defaults ...string) *StringSlice {$/;"	f	package:cli	typeref:typename:*StringSlice
NewStringSliceFlag	altsrc/flag_generated.go	/^func NewStringSliceFlag(fl *cli.StringSliceFlag) *StringSliceFlag {$/;"	f	package:altsrc	typeref:typename:*StringSliceFlag
NewStringerChoice	flag_choice.go	/^func NewStringerChoice(ss ...fmt.Stringer) Choice {$/;"	f	package:cli	typeref:typename:Choice
NewTimestamp	flag_timestamp.go	/^func NewTimestamp(timestamp time.Time) *Timestamp {$/;"	f	package:cli	typeref:typename:*Timestamp
NewTomlSourceFromFile	altsrc/toml_file_loader.go	/^func NewTomlSourceFromFile(file string) (InputSourceContext, error) {$/;"	f	package:altsrc	typeref:typename:(InputSourceContext, error)
NewTomlSourceFromFlagFunc	altsrc/toml_file_loader.go	/^func NewTomlSourceFromFlagFunc(flagFileName string) func(context *cli.Context) (InputSourceConte/;"	f	package:altsrc	typeref:typename:func(context *cli.Context) (InputSourceContext, error)
NewUint64Flag	altsrc/flag_generated.go	/^func NewUint64Flag(fl *cli.Uint64Flag) *Uint64Flag {$/;"	f	package:altsrc	typeref:typename:*Uint64Flag
NewUintFlag	altsrc/flag_generated.go	/^func NewUintFlag(fl *cli.UintFlag) *UintFlag {$/;"	f	package:altsrc	typeref:typename:*UintFlag
NewYamlSourceFromFile	altsrc/yaml_file_loader.go	/^func NewYamlSourceFromFile(file string) (InputSourceContext, error) {$/;"	f	package:altsrc	typeref:typename:(InputSourceContext, error)
NewYamlSourceFromFlagFunc	altsrc/yaml_file_loader.go	/^func NewYamlSourceFromFlagFunc(flagFileName string) func(context *cli.Context) (InputSourceConte/;"	f	package:altsrc	typeref:typename:func(context *cli.Context) (InputSourceContext, error)
Nombre	app_test.go	/^	Nombre string$/;"	m	struct:cli.customBoolFlag	typeref:typename:string
NumFlags	context.go	/^func (c *Context) NumFlags() int {$/;"	f	unknown:cli.Context	typeref:typename:int
Observed behavior	.github/ISSUE_TEMPLATE/v1-bug-report.md	/^## Observed behavior$/;"	s
Observed behavior	.github/ISSUE_TEMPLATE/v2-bug-report.md	/^## Observed behavior$/;"	s
OnUsageError	app.go	/^	OnUsageError OnUsageErrorFunc$/;"	m	struct:cli.App	typeref:typename:OnUsageErrorFunc
OnUsageError	app_test.go	/^	Total, ShellComplete, OnUsageError, Before, CommandNotFound, Action, After, SubCommand int$/;"	m	struct:cli.opCounts	typeref:typename:int
OnUsageError	command.go	/^	OnUsageError OnUsageErrorFunc$/;"	m	struct:cli.Command	typeref:typename:OnUsageErrorFunc
OnUsageErrorFunc	funcs.go	/^type OnUsageErrorFunc func(context *Context, err error, isSubcommand bool) error$/;"	t	package:cli
Ordering	docs/v1/manual.md	/^#### Ordering$/;"	t
Ordering	docs/v2/manual.md	/^#### Ordering$/;"	t
OsExiter	errors.go	/^var OsExiter = os.Exit$/;"	v	package:cli
Our Pledge	CODE_OF_CONDUCT.md	/^## Our Pledge$/;"	s
Our Responsibilities	CODE_OF_CONDUCT.md	/^## Our Responsibilities$/;"	s
Our Standards	CODE_OF_CONDUCT.md	/^## Our Standards$/;"	s
Parser	altsrc/flag_test.go	/^type Parser [2]string$/;"	t	package:altsrc
Parser	flag_test.go	/^type Parser [2]string$/;"	t	package:cli
Path	flag_path.go	/^func (c *Context) Path(name string) string {$/;"	f	unknown:cli.Context	typeref:typename:string
PathFlag	altsrc/flag_generated.go	/^	*cli.PathFlag$/;"	M	struct:altsrc.PathFlag	typeref:typename:*cli.PathFlag
PathFlag	altsrc/flag_generated.go	/^type PathFlag struct {$/;"	s	package:altsrc
PathFlag	flag_path.go	/^type PathFlag struct {$/;"	s	package:cli
Placeholder	flag_bool.go	/^	Placeholder 	 string$/;"	m	struct:cli.BoolFlag	typeref:typename:string
Placeholder	flag_choice.go	/^	Placeholder string$/;"	m	struct:cli.ChoiceFlag	typeref:typename:string
Placeholder	flag_duration.go	/^	Placeholder string$/;"	m	struct:cli.DurationFlag	typeref:typename:string
Placeholder	flag_float64.go	/^	Placeholder string$/;"	m	struct:cli.Float64Flag	typeref:typename:string
Placeholder	flag_float64_slice.go	/^	Placeholder string$/;"	m	struct:cli.Float64SliceFlag	typeref:typename:string
Placeholder	flag_generic.go	/^	Placeholder string$/;"	m	struct:cli.GenericFlag	typeref:typename:string
Placeholder	flag_int.go	/^	Placeholder string$/;"	m	struct:cli.IntFlag	typeref:typename:string
Placeholder	flag_int64.go	/^	Placeholder string$/;"	m	struct:cli.Int64Flag	typeref:typename:string
Placeholder	flag_int64_slice.go	/^	Placeholder string$/;"	m	struct:cli.Int64SliceFlag	typeref:typename:string
Placeholder	flag_int_slice.go	/^	Placeholder string$/;"	m	struct:cli.IntSliceFlag	typeref:typename:string
Placeholder	flag_path.go	/^	Placeholder string$/;"	m	struct:cli.PathFlag	typeref:typename:string
Placeholder	flag_string.go	/^	Placeholder string$/;"	m	struct:cli.StringFlag	typeref:typename:string
Placeholder	flag_string_slice.go	/^	Placeholder string$/;"	m	struct:cli.StringSliceFlag	typeref:typename:string
Placeholder	flag_timestamp.go	/^	Placeholder string$/;"	m	struct:cli.TimestampFlag	typeref:typename:string
Placeholder	flag_uint.go	/^	Placeholder string$/;"	m	struct:cli.UintFlag	typeref:typename:string
Placeholder	flag_uint64.go	/^	Placeholder string$/;"	m	struct:cli.Uint64Flag	typeref:typename:string
Placeholder Values	docs/v1/manual.md	/^#### Placeholder Values$/;"	t
Placeholder Values	docs/v2/manual.md	/^#### Placeholder Values$/;"	t
PowerShell Support	docs/v2/manual.md	/^#### PowerShell Support$/;"	t
Precedence	docs/v1/manual.md	/^#### Precedence$/;"	t
Precedence	docs/v2/manual.md	/^#### Precedence$/;"	t
Present	args.go	/^func (a *args) Present() bool {$/;"	f	unknown:cli.args	typeref:typename:bool
Reader	app.go	/^	Reader io.Reader$/;"	m	struct:cli.App	typeref:typename:io.Reader
Release Notes	.github/pull_request_template.md	/^## Release Notes$/;"	s
Removed	docs/CHANGELOG.md	/^### Removed$/;"	S
Required	flag_bool.go	/^	Required         bool$/;"	m	struct:cli.BoolFlag	typeref:typename:bool
Required	flag_choice.go	/^	Required    bool$/;"	m	struct:cli.ChoiceFlag	typeref:typename:bool
Required	flag_duration.go	/^	Required    bool$/;"	m	struct:cli.DurationFlag	typeref:typename:bool
Required	flag_float64.go	/^	Required    bool$/;"	m	struct:cli.Float64Flag	typeref:typename:bool
Required	flag_float64_slice.go	/^	Required    bool$/;"	m	struct:cli.Float64SliceFlag	typeref:typename:bool
Required	flag_generic.go	/^	Required    bool$/;"	m	struct:cli.GenericFlag	typeref:typename:bool
Required	flag_int.go	/^	Required    bool$/;"	m	struct:cli.IntFlag	typeref:typename:bool
Required	flag_int64.go	/^	Required    bool$/;"	m	struct:cli.Int64Flag	typeref:typename:bool
Required	flag_int64_slice.go	/^	Required    bool$/;"	m	struct:cli.Int64SliceFlag	typeref:typename:bool
Required	flag_int_slice.go	/^	Required    bool$/;"	m	struct:cli.IntSliceFlag	typeref:typename:bool
Required	flag_path.go	/^	Required    bool$/;"	m	struct:cli.PathFlag	typeref:typename:bool
Required	flag_string.go	/^	Required    bool$/;"	m	struct:cli.StringFlag	typeref:typename:bool
Required	flag_string_slice.go	/^	Required    bool$/;"	m	struct:cli.StringSliceFlag	typeref:typename:bool
Required	flag_timestamp.go	/^	Required    bool$/;"	m	struct:cli.TimestampFlag	typeref:typename:bool
Required	flag_uint.go	/^	Required    bool$/;"	m	struct:cli.UintFlag	typeref:typename:bool
Required	flag_uint64.go	/^	Required    bool$/;"	m	struct:cli.Uint64Flag	typeref:typename:bool
Required Flags	docs/v2/manual.md	/^#### Required Flags$/;"	t
RequiredFlag	flag.go	/^type RequiredFlag interface {$/;"	i	package:cli
Run	app.go	/^func (a *App) Run(arguments []string) (err error) {$/;"	f	unknown:cli.App	typeref:typename:(err error)
Run	command.go	/^func (c *Command) Run(ctx *Context) (err error) {$/;"	f	unknown:cli.Command	typeref:typename:(err error)
Run `go env` and paste its output here	.github/ISSUE_TEMPLATE/v1-bug-report.md	/^## Run `go env` and paste its output here$/;"	s
Run `go env` and paste its output here	.github/ISSUE_TEMPLATE/v2-bug-report.md	/^## Run `go env` and paste its output here$/;"	s
Run `go version` and paste its output here	.github/ISSUE_TEMPLATE/v1-bug-report.md	/^## Run `go version` and paste its output here$/;"	s
Run `go version` and paste its output here	.github/ISSUE_TEMPLATE/v2-bug-report.md	/^## Run `go version` and paste its output here$/;"	s
RunAndExitOnError	app.go	/^func (a *App) RunAndExitOnError() {$/;"	f	unknown:cli.App
RunAsSubcommand	app.go	/^func (a *App) RunAsSubcommand(ctx *Context) (err error) {$/;"	f	unknown:cli.App	typeref:typename:(err error)
RunContext	app.go	/^func (a *App) RunContext(ctx context.Context, arguments []string) (err error) {$/;"	f	unknown:cli.App	typeref:typename:(err error)
SYNOPSIS	testdata/expected-doc-full.md	/^# SYNOPSIS$/;"	c
SYNOPSIS	testdata/expected-doc-no-authors.md	/^# SYNOPSIS$/;"	c
SYNOPSIS	testdata/expected-doc-no-commands.md	/^# SYNOPSIS$/;"	c
SYNOPSIS	testdata/expected-doc-no-flags.md	/^# SYNOPSIS$/;"	c
Scope	CODE_OF_CONDUCT.md	/^## Scope$/;"	s
SectionNum	docs.go	/^	SectionNum   int$/;"	m	struct:cli.cliTemplate	typeref:typename:int
Serialize	flag_float64_slice.go	/^func (f *Float64Slice) Serialize() string {$/;"	f	unknown:cli.Float64Slice	typeref:typename:string
Serialize	flag_int64_slice.go	/^func (i *Int64Slice) Serialize() string {$/;"	f	unknown:cli.Int64Slice	typeref:typename:string
Serialize	flag_int_slice.go	/^func (i *IntSlice) Serialize() string {$/;"	f	unknown:cli.IntSlice	typeref:typename:string
Serialize	flag_string_slice.go	/^func (s *StringSlice) Serialize() string {$/;"	f	unknown:cli.StringSlice	typeref:typename:string
Serializer	flag.go	/^type Serializer interface {$/;"	i	package:cli
Set	altsrc/flag_test.go	/^func (p *Parser) Set(value string) error {$/;"	f	unknown:altsrc.Parser	typeref:typename:error
Set	context.go	/^func (c *Context) Set(name, value string) error {$/;"	f	unknown:cli.Context	typeref:typename:error
Set	flag_choice.go	/^func (c *choiceValue) Set(s string) error {$/;"	f	unknown:cli.choiceValue	typeref:typename:error
Set	flag_float64_slice.go	/^func (f *Float64Slice) Set(value string) error {$/;"	f	unknown:cli.Float64Slice	typeref:typename:error
Set	flag_int64_slice.go	/^func (i *Int64Slice) Set(value string) error {$/;"	f	unknown:cli.Int64Slice	typeref:typename:error
Set	flag_int_slice.go	/^func (i *IntSlice) Set(value string) error {$/;"	f	unknown:cli.IntSlice	typeref:typename:error
Set	flag_string_slice.go	/^func (s *StringSlice) Set(value string) error {$/;"	f	unknown:cli.StringSlice	typeref:typename:error
Set	flag_test.go	/^func (p *Parser) Set(value string) error {$/;"	f	unknown:cli.Parser	typeref:typename:error
Set	flag_timestamp.go	/^func (t *Timestamp) Set(value string) error {$/;"	f	unknown:cli.Timestamp	typeref:typename:error
SetInt	flag_int_slice.go	/^func (i *IntSlice) SetInt(value int) {$/;"	f	unknown:cli.IntSlice
SetLayout	flag_timestamp.go	/^func (t *Timestamp) SetLayout(layout string) {$/;"	f	unknown:cli.Timestamp
SetTimestamp	flag_timestamp.go	/^func (t *Timestamp) SetTimestamp(value time.Time) {$/;"	f	unknown:cli.Timestamp
Setup	app.go	/^func (a *App) Setup() {$/;"	f	unknown:cli.App
ShellComplete	app_test.go	/^	Total, ShellComplete, OnUsageError, Before, CommandNotFound, Action, After, SubCommand int$/;"	m	struct:cli.opCounts	typeref:typename:int
ShowAppHelp	help.go	/^func ShowAppHelp(c *Context) error {$/;"	f	package:cli	typeref:typename:error
ShowAppHelpAndExit	help.go	/^func ShowAppHelpAndExit(c *Context, exitCode int) {$/;"	f	package:cli
ShowCommandCompletions	help.go	/^func ShowCommandCompletions(ctx *Context, command string) {$/;"	f	package:cli
ShowCommandHelp	help.go	/^func ShowCommandHelp(ctx *Context, command string) error {$/;"	f	package:cli	typeref:typename:error
ShowCommandHelpAndExit	help.go	/^func ShowCommandHelpAndExit(c *Context, command string, code int) {$/;"	f	package:cli
ShowCompletions	help.go	/^func ShowCompletions(c *Context) {$/;"	f	package:cli
ShowSubcommandHelp	help.go	/^func ShowSubcommandHelp(c *Context) error {$/;"	f	package:cli	typeref:typename:error
ShowSubcommandHelpAndExit	help.go	/^func ShowSubcommandHelpAndExit(c *Context, exitCode int) {$/;"	f	package:cli
ShowVersion	help.go	/^func ShowVersion(c *Context) {$/;"	f	package:cli
SkipFlagParsing	command.go	/^	SkipFlagParsing bool$/;"	m	struct:cli.Command	typeref:typename:bool
Slice	args.go	/^func (a *args) Slice() []string {$/;"	f	unknown:cli.args	typeref:typename:[]string
Solution description	.github/ISSUE_TEMPLATE/v2-feature-request.md	/^## Solution description$/;"	s
Source	altsrc/json_source_context.go	/^func (x *jsonSource) Source() string {$/;"	f	unknown:altsrc.jsonSource	typeref:typename:string
Source	altsrc/map_input_source.go	/^func (fsm *MapInputSource) Source() string {$/;"	f	unknown:altsrc.MapInputSource	typeref:typename:string
SourcePath	altsrc/flag_test.go	/^	SourcePath         string$/;"	m	struct:altsrc.testApplyInputSource	typeref:typename:string
Special notes for your reviewer:	.github/pull_request_template.md	/^## Special notes for your reviewer:$/;"	s
String	altsrc/flag_test.go	/^func (p *Parser) String() string {$/;"	f	unknown:altsrc.Parser	typeref:typename:string
String	altsrc/json_source_context.go	/^func (x *jsonSource) String(name string) (string, error) {$/;"	f	unknown:altsrc.jsonSource	typeref:typename:(string, error)
String	altsrc/map_input_source.go	/^func (fsm *MapInputSource) String(name string) (string, error) {$/;"	f	unknown:altsrc.MapInputSource	typeref:typename:(string, error)
String	app.go	/^func (a *Author) String() string {$/;"	f	unknown:cli.Author	typeref:typename:string
String	app_test.go	/^func (c *customBoolFlag) String() string {$/;"	f	unknown:cli.customBoolFlag	typeref:typename:string
String	flag_bool.go	/^func (f *BoolFlag) String() string {$/;"	f	unknown:cli.BoolFlag	typeref:typename:string
String	flag_choice.go	/^func (c *choiceValue) String() string {$/;"	f	unknown:cli.choiceValue	typeref:typename:string
String	flag_choice.go	/^func (f *ChoiceFlag) String() string {$/;"	f	unknown:cli.ChoiceFlag	typeref:typename:string
String	flag_duration.go	/^func (f *DurationFlag) String() string {$/;"	f	unknown:cli.DurationFlag	typeref:typename:string
String	flag_float64.go	/^func (f *Float64Flag) String() string {$/;"	f	unknown:cli.Float64Flag	typeref:typename:string
String	flag_float64_slice.go	/^func (f *Float64Slice) String() string {$/;"	f	unknown:cli.Float64Slice	typeref:typename:string
String	flag_float64_slice.go	/^func (f *Float64SliceFlag) String() string {$/;"	f	unknown:cli.Float64SliceFlag	typeref:typename:string
String	flag_generic.go	/^func (f *GenericFlag) String() string {$/;"	f	unknown:cli.GenericFlag	typeref:typename:string
String	flag_int.go	/^func (f *IntFlag) String() string {$/;"	f	unknown:cli.IntFlag	typeref:typename:string
String	flag_int64.go	/^func (f *Int64Flag) String() string {$/;"	f	unknown:cli.Int64Flag	typeref:typename:string
String	flag_int64_slice.go	/^func (f *Int64SliceFlag) String() string {$/;"	f	unknown:cli.Int64SliceFlag	typeref:typename:string
String	flag_int64_slice.go	/^func (i *Int64Slice) String() string {$/;"	f	unknown:cli.Int64Slice	typeref:typename:string
String	flag_int_slice.go	/^func (f *IntSliceFlag) String() string {$/;"	f	unknown:cli.IntSliceFlag	typeref:typename:string
String	flag_int_slice.go	/^func (i *IntSlice) String() string {$/;"	f	unknown:cli.IntSlice	typeref:typename:string
String	flag_path.go	/^func (f *PathFlag) String() string {$/;"	f	unknown:cli.PathFlag	typeref:typename:string
String	flag_string.go	/^func (c *Context) String(name string) string {$/;"	f	unknown:cli.Context	typeref:typename:string
String	flag_string.go	/^func (f *StringFlag) String() string {$/;"	f	unknown:cli.StringFlag	typeref:typename:string
String	flag_string_slice.go	/^func (f *StringSliceFlag) String() string {$/;"	f	unknown:cli.StringSliceFlag	typeref:typename:string
String	flag_string_slice.go	/^func (s *StringSlice) String() string {$/;"	f	unknown:cli.StringSlice	typeref:typename:string
String	flag_test.go	/^func (p *Parser) String() string {$/;"	f	unknown:cli.Parser	typeref:typename:string
String	flag_timestamp.go	/^func (f *TimestampFlag) String() string {$/;"	f	unknown:cli.TimestampFlag	typeref:typename:string
String	flag_timestamp.go	/^func (t *Timestamp) String() string {$/;"	f	unknown:cli.Timestamp	typeref:typename:string
String	flag_uint.go	/^func (f *UintFlag) String() string {$/;"	f	unknown:cli.UintFlag	typeref:typename:string
String	flag_uint64.go	/^func (f *Uint64Flag) String() string {$/;"	f	unknown:cli.Uint64Flag	typeref:typename:string
StringFlag	altsrc/flag_generated.go	/^	*cli.StringFlag$/;"	M	struct:altsrc.StringFlag	typeref:typename:*cli.StringFlag
StringFlag	altsrc/flag_generated.go	/^type StringFlag struct {$/;"	s	package:altsrc
StringFlag	flag_string.go	/^type StringFlag struct {$/;"	s	package:cli
StringSlice	altsrc/json_source_context.go	/^func (x *jsonSource) StringSlice(name string) ([]string, error) {$/;"	f	unknown:altsrc.jsonSource	typeref:typename:([]string, error)
StringSlice	altsrc/map_input_source.go	/^func (fsm *MapInputSource) StringSlice(name string) ([]string, error) {$/;"	f	unknown:altsrc.MapInputSource	typeref:typename:([]string, error)
StringSlice	flag_string_slice.go	/^func (c *Context) StringSlice(name string) []string {$/;"	f	unknown:cli.Context	typeref:typename:[]string
StringSlice	flag_string_slice.go	/^type StringSlice struct {$/;"	s	package:cli
StringSliceFlag	altsrc/flag_generated.go	/^	*cli.StringSliceFlag$/;"	M	struct:altsrc.StringSliceFlag	typeref:typename:*cli.StringSliceFlag
StringSliceFlag	altsrc/flag_generated.go	/^type StringSliceFlag struct {$/;"	s	package:altsrc
StringSliceFlag	flag_string_slice.go	/^type StringSliceFlag struct {$/;"	s	package:cli
Strings	flag_choice.go	/^func (c *defaultChoice) Strings() []string {$/;"	f	unknown:cli.defaultChoice	typeref:typename:[]string
SubCommand	app_test.go	/^	Total, ShellComplete, OnUsageError, Before, CommandNotFound, Action, After, SubCommand int$/;"	m	struct:cli.opCounts	typeref:typename:int
SubcommandHelpTemplate	template.go	/^var SubcommandHelpTemplate = `NAME:$/;"	v	package:cli
Subcommands	command.go	/^	Subcommands []*Command$/;"	m	struct:cli.Command	typeref:typename:[]*Command
Subcommands	docs/v1/manual.md	/^### Subcommands$/;"	S
Subcommands	docs/v2/manual.md	/^### Subcommands$/;"	S
Subcommands categories	docs/v1/manual.md	/^### Subcommands categories$/;"	S
Subcommands categories	docs/v2/manual.md	/^### Subcommands categories$/;"	S
Supported platforms	README.md	/^### Supported platforms$/;"	S
Swap	category.go	/^func (c *commandCategories) Swap(i, j int) {$/;"	f	unknown:cli.commandCategories
Swap	command.go	/^func (c CommandsByName) Swap(i, j int) {$/;"	f	unknown:cli.CommandsByName
Swap	flag.go	/^func (f FlagsByName) Swap(i, j int) {$/;"	f	unknown:cli.FlagsByName
SynopsisArgs	docs.go	/^	SynopsisArgs []string$/;"	m	struct:cli.cliTemplate	typeref:typename:[]string
Tail	args.go	/^func (a *args) Tail() []string {$/;"	f	unknown:cli.args	typeref:typename:[]string
TakesFile	flag_generic.go	/^	TakesFile   bool$/;"	m	struct:cli.GenericFlag	typeref:typename:bool
TakesFile	flag_path.go	/^	TakesFile   bool$/;"	m	struct:cli.PathFlag	typeref:typename:bool
TakesFile	flag_string.go	/^	TakesFile   bool$/;"	m	struct:cli.StringFlag	typeref:typename:bool
TakesFile	flag_string_slice.go	/^	TakesFile   bool$/;"	m	struct:cli.StringSliceFlag	typeref:typename:bool
TakesValue	app_test.go	/^func (c *customBoolFlag) TakesValue() bool {$/;"	f	unknown:cli.customBoolFlag	typeref:typename:bool
TakesValue	flag_bool.go	/^func (f *BoolFlag) TakesValue() bool {$/;"	f	unknown:cli.BoolFlag	typeref:typename:bool
TakesValue	flag_choice.go	/^func (f *ChoiceFlag) TakesValue() bool {$/;"	f	unknown:cli.ChoiceFlag	typeref:typename:bool
TakesValue	flag_duration.go	/^func (f *DurationFlag) TakesValue() bool {$/;"	f	unknown:cli.DurationFlag	typeref:typename:bool
TakesValue	flag_float64.go	/^func (f *Float64Flag) TakesValue() bool {$/;"	f	unknown:cli.Float64Flag	typeref:typename:bool
TakesValue	flag_float64_slice.go	/^func (f *Float64SliceFlag) TakesValue() bool {$/;"	f	unknown:cli.Float64SliceFlag	typeref:typename:bool
TakesValue	flag_generic.go	/^func (f *GenericFlag) TakesValue() bool {$/;"	f	unknown:cli.GenericFlag	typeref:typename:bool
TakesValue	flag_int.go	/^func (f *IntFlag) TakesValue() bool {$/;"	f	unknown:cli.IntFlag	typeref:typename:bool
TakesValue	flag_int64.go	/^func (f *Int64Flag) TakesValue() bool {$/;"	f	unknown:cli.Int64Flag	typeref:typename:bool
TakesValue	flag_int64_slice.go	/^func (f *Int64SliceFlag) TakesValue() bool {$/;"	f	unknown:cli.Int64SliceFlag	typeref:typename:bool
TakesValue	flag_int_slice.go	/^func (f *IntSliceFlag) TakesValue() bool {$/;"	f	unknown:cli.IntSliceFlag	typeref:typename:bool
TakesValue	flag_path.go	/^func (f *PathFlag) TakesValue() bool {$/;"	f	unknown:cli.PathFlag	typeref:typename:bool
TakesValue	flag_string.go	/^func (f *StringFlag) TakesValue() bool {$/;"	f	unknown:cli.StringFlag	typeref:typename:bool
TakesValue	flag_string_slice.go	/^func (f *StringSliceFlag) TakesValue() bool {$/;"	f	unknown:cli.StringSliceFlag	typeref:typename:bool
TakesValue	flag_timestamp.go	/^func (f *TimestampFlag) TakesValue() bool {$/;"	f	unknown:cli.TimestampFlag	typeref:typename:bool
TakesValue	flag_uint.go	/^func (f *UintFlag) TakesValue() bool {$/;"	f	unknown:cli.UintFlag	typeref:typename:bool
TakesValue	flag_uint64.go	/^func (f *Uint64Flag) TakesValue() bool {$/;"	f	unknown:cli.Uint64Flag	typeref:typename:bool
TestAppHelpPrinter	app_test.go	/^func TestAppHelpPrinter(t *testing.T) {$/;"	f	package:cli
TestAppNoHelpFlag	app_test.go	/^func TestAppNoHelpFlag(t *testing.T) {$/;"	f	package:cli
TestApp_AfterFunc	app_test.go	/^func TestApp_AfterFunc(t *testing.T) {$/;"	f	package:cli
TestApp_BeforeFunc	app_test.go	/^func TestApp_BeforeFunc(t *testing.T) {$/;"	f	package:cli
TestApp_Command	app_test.go	/^func TestApp_Command(t *testing.T) {$/;"	f	package:cli
TestApp_CommandNotFound	app_test.go	/^func TestApp_CommandNotFound(t *testing.T) {$/;"	f	package:cli
TestApp_CommandWithDash	app_test.go	/^func TestApp_CommandWithDash(t *testing.T) {$/;"	f	package:cli
TestApp_CommandWithFlagBeforeTerminator	app_test.go	/^func TestApp_CommandWithFlagBeforeTerminator(t *testing.T) {$/;"	f	package:cli
TestApp_CommandWithNoFlagBeforeTerminator	app_test.go	/^func TestApp_CommandWithNoFlagBeforeTerminator(t *testing.T) {$/;"	f	package:cli
TestApp_DefaultStdin	app_test.go	/^func TestApp_DefaultStdin(t *testing.T) {$/;"	f	package:cli
TestApp_DefaultStdout	app_test.go	/^func TestApp_DefaultStdout(t *testing.T) {$/;"	f	package:cli
TestApp_Float64Flag	app_test.go	/^func TestApp_Float64Flag(t *testing.T) {$/;"	f	package:cli
TestApp_OnUsageError_WithWrongFlagValue	app_test.go	/^func TestApp_OnUsageError_WithWrongFlagValue(t *testing.T) {$/;"	f	package:cli
TestApp_OnUsageError_WithWrongFlagValue_ForSubcommand	app_test.go	/^func TestApp_OnUsageError_WithWrongFlagValue_ForSubcommand(t *testing.T) {$/;"	f	package:cli
TestApp_OrderOfOperations	app_test.go	/^func TestApp_OrderOfOperations(t *testing.T) {$/;"	f	package:cli
TestApp_ParseSliceFlags	app_test.go	/^func TestApp_ParseSliceFlags(t *testing.T) {$/;"	f	package:cli
TestApp_ParseSliceFlagsWithMissingValue	app_test.go	/^func TestApp_ParseSliceFlagsWithMissingValue(t *testing.T) {$/;"	f	package:cli
TestApp_PreventDefaultPrint_When_BoolFlag	app_test.go	/^func TestApp_PreventDefaultPrint_When_BoolFlag(t *testing.T) {$/;"	f	package:cli
TestApp_Run	app_test.go	/^func TestApp_Run(t *testing.T) {$/;"	f	package:cli
TestApp_RunAsSubCommandIncorrectUsage	app_test.go	/^func TestApp_RunAsSubCommandIncorrectUsage(t *testing.T) {$/;"	f	package:cli
TestApp_RunAsSubcommandParseFlags	app_test.go	/^func TestApp_RunAsSubcommandParseFlags(t *testing.T) {$/;"	f	package:cli
TestApp_Run_Categories	app_test.go	/^func TestApp_Run_Categories(t *testing.T) {$/;"	f	package:cli
TestApp_Run_CommandHelpName	app_test.go	/^func TestApp_Run_CommandHelpName(t *testing.T) {$/;"	f	package:cli
TestApp_Run_CommandSubcommandHelpName	app_test.go	/^func TestApp_Run_CommandSubcommandHelpName(t *testing.T) {$/;"	f	package:cli
TestApp_Run_CommandWithSubcommandHasHelpTopic	app_test.go	/^func TestApp_Run_CommandWithSubcommandHasHelpTopic(t *testing.T) {$/;"	f	package:cli
TestApp_Run_DoesNotOverwriteErrorFromBefore	app_test.go	/^func TestApp_Run_DoesNotOverwriteErrorFromBefore(t *testing.T) {$/;"	f	package:cli
TestApp_Run_Help	app_test.go	/^func TestApp_Run_Help(t *testing.T) {$/;"	f	package:cli
TestApp_Run_SubcommandDoesNotOverwriteErrorFromBefore	app_test.go	/^func TestApp_Run_SubcommandDoesNotOverwriteErrorFromBefore(t *testing.T) {$/;"	f	package:cli
TestApp_Run_SubcommandFullPath	app_test.go	/^func TestApp_Run_SubcommandFullPath(t *testing.T) {$/;"	f	package:cli
TestApp_Run_SubcommandHelpName	app_test.go	/^func TestApp_Run_SubcommandHelpName(t *testing.T) {$/;"	f	package:cli
TestApp_Run_Version	app_test.go	/^func TestApp_Run_Version(t *testing.T) {$/;"	f	package:cli
TestApp_SetStdin	app_test.go	/^func TestApp_SetStdin(t *testing.T) {$/;"	f	package:cli
TestApp_SetStdin_Subcommand	app_test.go	/^func TestApp_SetStdin_Subcommand(t *testing.T) {$/;"	f	package:cli
TestApp_SetStdout	app_test.go	/^func TestApp_SetStdout(t *testing.T) {$/;"	f	package:cli
TestApp_Setup_defaultsReader	app_test.go	/^func TestApp_Setup_defaultsReader(t *testing.T) {$/;"	f	package:cli
TestApp_Setup_defaultsWriter	app_test.go	/^func TestApp_Setup_defaultsWriter(t *testing.T) {$/;"	f	package:cli
TestApp_UseShortOptionHandling	app_test.go	/^func TestApp_UseShortOptionHandling(t *testing.T) {$/;"	f	package:cli
TestApp_UseShortOptionHandlingCommand	app_test.go	/^func TestApp_UseShortOptionHandlingCommand(t *testing.T) {$/;"	f	package:cli
TestApp_UseShortOptionHandlingCommand_missing_value	app_test.go	/^func TestApp_UseShortOptionHandlingCommand_missing_value(t *testing.T) {$/;"	f	package:cli
TestApp_UseShortOptionHandlingSubCommand	app_test.go	/^func TestApp_UseShortOptionHandlingSubCommand(t *testing.T) {$/;"	f	package:cli
TestApp_UseShortOptionHandlingSubCommand_missing_value	app_test.go	/^func TestApp_UseShortOptionHandlingSubCommand_missing_value(t *testing.T) {$/;"	f	package:cli
TestApp_UseShortOptionHandling_missing_value	app_test.go	/^func TestApp_UseShortOptionHandling_missing_value(t *testing.T) {$/;"	f	package:cli
TestApp_VersionPrinter	app_test.go	/^func TestApp_VersionPrinter(t *testing.T) {$/;"	f	package:cli
TestApp_VisibleCategories	app_test.go	/^func TestApp_VisibleCategories(t *testing.T) {$/;"	f	package:cli
TestApp_VisibleCommands	app_test.go	/^func TestApp_VisibleCommands(t *testing.T) {$/;"	f	package:cli
TestBoolApplyInputSourceMethodContextSet	altsrc/flag_test.go	/^func TestBoolApplyInputSourceMethodContextSet(t *testing.T) {$/;"	f	package:altsrc
TestBoolApplyInputSourceMethodEnvVarSet	altsrc/flag_test.go	/^func TestBoolApplyInputSourceMethodEnvVarSet(t *testing.T) {$/;"	f	package:altsrc
TestBoolApplyInputSourceMethodSet	altsrc/flag_test.go	/^func TestBoolApplyInputSourceMethodSet(t *testing.T) {$/;"	f	package:altsrc
TestBoolFlagApply_SetsAllNames	flag_test.go	/^func TestBoolFlagApply_SetsAllNames(t *testing.T) {$/;"	f	package:cli
TestBoolFlagHelpOutput	flag_test.go	/^func TestBoolFlagHelpOutput(t *testing.T) {$/;"	f	package:cli
TestCheckRequiredFlags	context_test.go	/^func TestCheckRequiredFlags(t *testing.T) {$/;"	f	package:cli
TestCommandFlagParsing	command_test.go	/^func TestCommandFlagParsing(t *testing.T) {$/;"	f	package:cli
TestCommandJSONFileFlagHasDefaultGlobalEnvJSONSetGlobalEnvWins	altsrc/json_command_test.go	/^func TestCommandJSONFileFlagHasDefaultGlobalEnvJSONSetGlobalEnvWins(t *testing.T) {$/;"	f	package:altsrc
TestCommandJSONFileFlagHasDefaultGlobalEnvJSONSetGlobalEnvWinsNested	altsrc/json_command_test.go	/^func TestCommandJSONFileFlagHasDefaultGlobalEnvJSONSetGlobalEnvWinsNested(t *testing.T) {$/;"	f	package:altsrc
TestCommandJSONFileTest	altsrc/json_command_test.go	/^func TestCommandJSONFileTest(t *testing.T) {$/;"	f	package:altsrc
TestCommandJSONFileTestDefaultValueFileWins	altsrc/json_command_test.go	/^func TestCommandJSONFileTestDefaultValueFileWins(t *testing.T) {$/;"	f	package:altsrc
TestCommandJSONFileTestDefaultValueFileWinsNested	altsrc/json_command_test.go	/^func TestCommandJSONFileTestDefaultValueFileWinsNested(t *testing.T) {$/;"	f	package:altsrc
TestCommandJSONFileTestGlobalEnvVarWins	altsrc/json_command_test.go	/^func TestCommandJSONFileTestGlobalEnvVarWins(t *testing.T) {$/;"	f	package:altsrc
TestCommandJSONFileTestGlobalEnvVarWinsNested	altsrc/json_command_test.go	/^func TestCommandJSONFileTestGlobalEnvVarWinsNested(t *testing.T) {$/;"	f	package:altsrc
TestCommandJSONFileTestSpecifiedFlagWins	altsrc/json_command_test.go	/^func TestCommandJSONFileTestSpecifiedFlagWins(t *testing.T) {$/;"	f	package:altsrc
TestCommandJSONFileTestSpecifiedFlagWinsNested	altsrc/json_command_test.go	/^func TestCommandJSONFileTestSpecifiedFlagWinsNested(t *testing.T) {$/;"	f	package:altsrc
TestCommandSkipFlagParsing	command_test.go	/^func TestCommandSkipFlagParsing(t *testing.T) {$/;"	f	package:cli
TestCommandTomFileTest	altsrc/toml_command_test.go	/^func TestCommandTomFileTest(t *testing.T) {$/;"	f	package:altsrc
TestCommandTomlFileFlagHasDefaultGlobalEnvTomlSetGlobalEnvWins	altsrc/toml_command_test.go	/^func TestCommandTomlFileFlagHasDefaultGlobalEnvTomlSetGlobalEnvWins(t *testing.T) {$/;"	f	package:altsrc
TestCommandTomlFileFlagHasDefaultGlobalEnvTomlSetGlobalEnvWinsNested	altsrc/toml_command_test.go	/^func TestCommandTomlFileFlagHasDefaultGlobalEnvTomlSetGlobalEnvWinsNested(t *testing.T) {$/;"	f	package:altsrc
TestCommandTomlFileTestDefaultValueFileWins	altsrc/toml_command_test.go	/^func TestCommandTomlFileTestDefaultValueFileWins(t *testing.T) {$/;"	f	package:altsrc
TestCommandTomlFileTestDefaultValueFileWinsNested	altsrc/toml_command_test.go	/^func TestCommandTomlFileTestDefaultValueFileWinsNested(t *testing.T) {$/;"	f	package:altsrc
TestCommandTomlFileTestGlobalEnvVarWins	altsrc/toml_command_test.go	/^func TestCommandTomlFileTestGlobalEnvVarWins(t *testing.T) {$/;"	f	package:altsrc
TestCommandTomlFileTestGlobalEnvVarWinsNested	altsrc/toml_command_test.go	/^func TestCommandTomlFileTestGlobalEnvVarWinsNested(t *testing.T) {$/;"	f	package:altsrc
TestCommandTomlFileTestSpecifiedFlagWins	altsrc/toml_command_test.go	/^func TestCommandTomlFileTestSpecifiedFlagWins(t *testing.T) {$/;"	f	package:altsrc
TestCommandTomlFileTestSpecifiedFlagWinsNested	altsrc/toml_command_test.go	/^func TestCommandTomlFileTestSpecifiedFlagWinsNested(t *testing.T) {$/;"	f	package:altsrc
TestCommandYamlFileFlagHasDefaultGlobalEnvYamlSetGlobalEnvWins	altsrc/yaml_command_test.go	/^func TestCommandYamlFileFlagHasDefaultGlobalEnvYamlSetGlobalEnvWins(t *testing.T) {$/;"	f	package:altsrc
TestCommandYamlFileFlagHasDefaultGlobalEnvYamlSetGlobalEnvWinsNested	altsrc/yaml_command_test.go	/^func TestCommandYamlFileFlagHasDefaultGlobalEnvYamlSetGlobalEnvWinsNested(t *testing.T) {$/;"	f	package:altsrc
TestCommandYamlFileTest	altsrc/yaml_command_test.go	/^func TestCommandYamlFileTest(t *testing.T) {$/;"	f	package:altsrc
TestCommandYamlFileTestDefaultValueFileWins	altsrc/yaml_command_test.go	/^func TestCommandYamlFileTestDefaultValueFileWins(t *testing.T) {$/;"	f	package:altsrc
TestCommandYamlFileTestDefaultValueFileWinsNested	altsrc/yaml_command_test.go	/^func TestCommandYamlFileTestDefaultValueFileWinsNested(t *testing.T) {$/;"	f	package:altsrc
TestCommandYamlFileTestGlobalEnvVarWins	altsrc/yaml_command_test.go	/^func TestCommandYamlFileTestGlobalEnvVarWins(t *testing.T) {$/;"	f	package:altsrc
TestCommandYamlFileTestGlobalEnvVarWinsNested	altsrc/yaml_command_test.go	/^func TestCommandYamlFileTestGlobalEnvVarWinsNested(t *testing.T) {$/;"	f	package:altsrc
TestCommandYamlFileTestSpecifiedFlagWins	altsrc/yaml_command_test.go	/^func TestCommandYamlFileTestSpecifiedFlagWins(t *testing.T) {$/;"	f	package:altsrc
TestCommandYamlFileTestSpecifiedFlagWinsNested	altsrc/yaml_command_test.go	/^func TestCommandYamlFileTestSpecifiedFlagWinsNested(t *testing.T) {$/;"	f	package:altsrc
TestCommand_CanAddVFlagOnCommands	command_test.go	/^func TestCommand_CanAddVFlagOnCommands(t *testing.T) {$/;"	f	package:cli
TestCommand_NoVersionFlagOnCommands	command_test.go	/^func TestCommand_NoVersionFlagOnCommands(t *testing.T) {$/;"	f	package:cli
TestCommand_OnUsageError_WithSubcommand	command_test.go	/^func TestCommand_OnUsageError_WithSubcommand(t *testing.T) {$/;"	f	package:cli
TestCommand_OnUsageError_WithWrongFlagValue	command_test.go	/^func TestCommand_OnUsageError_WithWrongFlagValue(t *testing.T) {$/;"	f	package:cli
TestCommand_OnUsageError_hasCommandContext	command_test.go	/^func TestCommand_OnUsageError_hasCommandContext(t *testing.T) {$/;"	f	package:cli
TestCommand_Run_BeforeSavesMetadata	command_test.go	/^func TestCommand_Run_BeforeSavesMetadata(t *testing.T) {$/;"	f	package:cli
TestCommand_Run_CustomShellCompleteAcceptsMalformedFlags	command_test.go	/^func TestCommand_Run_CustomShellCompleteAcceptsMalformedFlags(t *testing.T) {$/;"	f	package:cli
TestCommand_Run_DoesNotOverwriteErrorFromBefore	command_test.go	/^func TestCommand_Run_DoesNotOverwriteErrorFromBefore(t *testing.T) {$/;"	f	package:cli
TestCommand_Run_SubcommandsCanUseErrWriter	command_test.go	/^func TestCommand_Run_SubcommandsCanUseErrWriter(t *testing.T) {$/;"	f	package:cli
TestContextAttributeAccessing	context_test.go	/^func TestContextAttributeAccessing(t *testing.T) {$/;"	f	package:cli
TestContextPropagation	context_test.go	/^func TestContextPropagation(t *testing.T) {$/;"	f	package:cli
TestContext_Args	context_test.go	/^func TestContext_Args(t *testing.T) {$/;"	f	package:cli
TestContext_Bool	context_test.go	/^func TestContext_Bool(t *testing.T) {$/;"	f	package:cli
TestContext_Duration	context_test.go	/^func TestContext_Duration(t *testing.T) {$/;"	f	package:cli
TestContext_FlagNames	context_test.go	/^func TestContext_FlagNames(t *testing.T) {$/;"	f	package:cli
TestContext_Float64	context_test.go	/^func TestContext_Float64(t *testing.T) {$/;"	f	package:cli
TestContext_Int	context_test.go	/^func TestContext_Int(t *testing.T) {$/;"	f	package:cli
TestContext_Int64	context_test.go	/^func TestContext_Int64(t *testing.T) {$/;"	f	package:cli
TestContext_IsSet	context_test.go	/^func TestContext_IsSet(t *testing.T) {$/;"	f	package:cli
TestContext_IsSet_fromEnv	context_test.go	/^func TestContext_IsSet_fromEnv(t *testing.T) {$/;"	f	package:cli
TestContext_Lineage	context_test.go	/^func TestContext_Lineage(t *testing.T) {$/;"	f	package:cli
TestContext_LocalFlagNames	context_test.go	/^func TestContext_LocalFlagNames(t *testing.T) {$/;"	f	package:cli
TestContext_NArg	context_test.go	/^func TestContext_NArg(t *testing.T) {$/;"	f	package:cli
TestContext_NumFlags	context_test.go	/^func TestContext_NumFlags(t *testing.T) {$/;"	f	package:cli
TestContext_Path	context_test.go	/^func TestContext_Path(t *testing.T) {$/;"	f	package:cli
TestContext_Set	context_test.go	/^func TestContext_Set(t *testing.T) {$/;"	f	package:cli
TestContext_String	context_test.go	/^func TestContext_String(t *testing.T) {$/;"	f	package:cli
TestContext_Uint	context_test.go	/^func TestContext_Uint(t *testing.T) {$/;"	f	package:cli
TestContext_Uint64	context_test.go	/^func TestContext_Uint64(t *testing.T) {$/;"	f	package:cli
TestContext_Value	context_test.go	/^func TestContext_Value(t *testing.T) {$/;"	f	package:cli
TestContext_lookupFlagSet	context_test.go	/^func TestContext_lookupFlagSet(t *testing.T) {$/;"	f	package:cli
TestCustomFlagsUnused	app_test.go	/^func TestCustomFlagsUnused(t *testing.T) {$/;"	f	package:cli
TestCustomFlagsUsed	app_test.go	/^func TestCustomFlagsUsed(t *testing.T) {$/;"	f	package:cli
TestCustomHelpVersionFlags	app_test.go	/^func TestCustomHelpVersionFlags(t *testing.T) {$/;"	f	package:cli
TestDurationApplyInputSourceMethodContextSet	altsrc/flag_test.go	/^func TestDurationApplyInputSourceMethodContextSet(t *testing.T) {$/;"	f	package:altsrc
TestDurationApplyInputSourceMethodEnvVarSet	altsrc/flag_test.go	/^func TestDurationApplyInputSourceMethodEnvVarSet(t *testing.T) {$/;"	f	package:altsrc
TestDurationApplyInputSourceMethodSet	altsrc/flag_test.go	/^func TestDurationApplyInputSourceMethodSet(t *testing.T) {$/;"	f	package:altsrc
TestDurationFlagApply_SetsAllNames	flag_test.go	/^func TestDurationFlagApply_SetsAllNames(t *testing.T) {$/;"	f	package:cli
TestDurationFlagHelpOutput	flag_test.go	/^func TestDurationFlagHelpOutput(t *testing.T) {$/;"	f	package:cli
TestDurationFlagWithEnvVarHelpOutput	flag_test.go	/^func TestDurationFlagWithEnvVarHelpOutput(t *testing.T) {$/;"	f	package:cli
TestFishCompletion	fish_test.go	/^func TestFishCompletion(t *testing.T) {$/;"	f	package:cli
TestFlagDefaultValue	flag_test.go	/^func TestFlagDefaultValue(t *testing.T) {$/;"	f	package:cli
TestFlagFromFile	flag_test.go	/^func TestFlagFromFile(t *testing.T) {$/;"	f	package:cli
TestFlagsFromEnv	flag_test.go	/^func TestFlagsFromEnv(t *testing.T) {$/;"	f	package:cli
TestFloat64ApplyInputSourceMethodContextSet	altsrc/flag_test.go	/^func TestFloat64ApplyInputSourceMethodContextSet(t *testing.T) {$/;"	f	package:altsrc
TestFloat64ApplyInputSourceMethodEnvVarSet	altsrc/flag_test.go	/^func TestFloat64ApplyInputSourceMethodEnvVarSet(t *testing.T) {$/;"	f	package:altsrc
TestFloat64ApplyInputSourceMethodSet	altsrc/flag_test.go	/^func TestFloat64ApplyInputSourceMethodSet(t *testing.T) {$/;"	f	package:altsrc
TestFloat64FlagApply_SetsAllNames	flag_test.go	/^func TestFloat64FlagApply_SetsAllNames(t *testing.T) {$/;"	f	package:cli
TestFloat64FlagHelpOutput	flag_test.go	/^func TestFloat64FlagHelpOutput(t *testing.T) {$/;"	f	package:cli
TestFloat64FlagWithEnvVarHelpOutput	flag_test.go	/^func TestFloat64FlagWithEnvVarHelpOutput(t *testing.T) {$/;"	f	package:cli
TestFloat64SliceFlagHelpOutput	flag_test.go	/^func TestFloat64SliceFlagHelpOutput(t *testing.T) {$/;"	f	package:cli
TestFloat64SliceFlagWithEnvVarHelpOutput	flag_test.go	/^func TestFloat64SliceFlagWithEnvVarHelpOutput(t *testing.T) {$/;"	f	package:cli
TestGenericApplyInputSourceMethodContextSet	altsrc/flag_test.go	/^func TestGenericApplyInputSourceMethodContextSet(t *testing.T) {$/;"	f	package:altsrc
TestGenericApplyInputSourceMethodEnvVarSet	altsrc/flag_test.go	/^func TestGenericApplyInputSourceMethodEnvVarSet(t *testing.T) {$/;"	f	package:altsrc
TestGenericApplyInputSourceValue	altsrc/flag_test.go	/^func TestGenericApplyInputSourceValue(t *testing.T) {$/;"	f	package:altsrc
TestGenericFlagApply_SetsAllNames	flag_test.go	/^func TestGenericFlagApply_SetsAllNames(t *testing.T) {$/;"	f	package:cli
TestGenericFlagHelpOutput	flag_test.go	/^func TestGenericFlagHelpOutput(t *testing.T) {$/;"	f	package:cli
TestGenericFlagWithEnvVarHelpOutput	flag_test.go	/^func TestGenericFlagWithEnvVarHelpOutput(t *testing.T) {$/;"	f	package:cli
TestHandleExitCoder_Custom	app_test.go	/^func TestHandleExitCoder_Custom(t *testing.T) {$/;"	f	package:cli
TestHandleExitCoder_Default	app_test.go	/^func TestHandleExitCoder_Default(t *testing.T) {$/;"	f	package:cli
TestHandleExitCoder_ErrorWithFormat	errors_test.go	/^func TestHandleExitCoder_ErrorWithFormat(t *testing.T) {$/;"	f	package:cli
TestHandleExitCoder_ExitCoder	errors_test.go	/^func TestHandleExitCoder_ExitCoder(t *testing.T) {$/;"	f	package:cli
TestHandleExitCoder_MultiErrorWithExitCoder	errors_test.go	/^func TestHandleExitCoder_MultiErrorWithExitCoder(t *testing.T) {$/;"	f	package:cli
TestHandleExitCoder_MultiErrorWithFormat	errors_test.go	/^func TestHandleExitCoder_MultiErrorWithFormat(t *testing.T) {$/;"	f	package:cli
TestHandleExitCoder_MultiErrorWithoutExitCoder	errors_test.go	/^func TestHandleExitCoder_MultiErrorWithoutExitCoder(t *testing.T) {$/;"	f	package:cli
TestHandleExitCoder_nil	errors_test.go	/^func TestHandleExitCoder_nil(t *testing.T) {$/;"	f	package:cli
TestHideHelpCommand	help_test.go	/^func TestHideHelpCommand(t *testing.T) {$/;"	f	package:cli
TestHideHelpCommand_False	help_test.go	/^func TestHideHelpCommand_False(t *testing.T) {$/;"	f	package:cli
TestHideHelpCommand_RunAsSubcommand	help_test.go	/^func TestHideHelpCommand_RunAsSubcommand(t *testing.T) {$/;"	f	package:cli
TestHideHelpCommand_RunAsSubcommand_False	help_test.go	/^func TestHideHelpCommand_RunAsSubcommand_False(t *testing.T) {$/;"	f	package:cli
TestHideHelpCommand_WithHideHelp	help_test.go	/^func TestHideHelpCommand_WithHideHelp(t *testing.T) {$/;"	f	package:cli
TestHideHelpCommand_WithSubcommands	help_test.go	/^func TestHideHelpCommand_WithSubcommands(t *testing.T) {$/;"	f	package:cli
TestInt64FlagHelpOutput	flag_test.go	/^func TestInt64FlagHelpOutput(t *testing.T) {$/;"	f	package:cli
TestInt64FlagWithEnvVarHelpOutput	flag_test.go	/^func TestInt64FlagWithEnvVarHelpOutput(t *testing.T) {$/;"	f	package:cli
TestInt64SliceFlagApply_ParentContext	flag_test.go	/^func TestInt64SliceFlagApply_ParentContext(t *testing.T) {$/;"	f	package:cli
TestInt64SliceFlagHelpOutput	flag_test.go	/^func TestInt64SliceFlagHelpOutput(t *testing.T) {$/;"	f	package:cli
TestInt64SliceFlagWithEnvVarHelpOutput	flag_test.go	/^func TestInt64SliceFlagWithEnvVarHelpOutput(t *testing.T) {$/;"	f	package:cli
TestInt64SliceFlag_ReturnNil	flag_test.go	/^func TestInt64SliceFlag_ReturnNil(t *testing.T) {$/;"	f	package:cli
TestInt64SliceFlag_SetFromParentContext	flag_test.go	/^func TestInt64SliceFlag_SetFromParentContext(t *testing.T) {$/;"	f	package:cli
TestInt64Slice_Serialized_Set	flag_test.go	/^func TestInt64Slice_Serialized_Set(t *testing.T) {$/;"	f	package:cli
TestIntApplyInputSourceMethodContextSet	altsrc/flag_test.go	/^func TestIntApplyInputSourceMethodContextSet(t *testing.T) {$/;"	f	package:altsrc
TestIntApplyInputSourceMethodEnvVarSet	altsrc/flag_test.go	/^func TestIntApplyInputSourceMethodEnvVarSet(t *testing.T) {$/;"	f	package:altsrc
TestIntApplyInputSourceMethodSet	altsrc/flag_test.go	/^func TestIntApplyInputSourceMethodSet(t *testing.T) {$/;"	f	package:altsrc
TestIntFlagApply_SetsAllNames	flag_test.go	/^func TestIntFlagApply_SetsAllNames(t *testing.T) {$/;"	f	package:cli
TestIntFlagHelpOutput	flag_test.go	/^func TestIntFlagHelpOutput(t *testing.T) {$/;"	f	package:cli
TestIntFlagWithEnvVarHelpOutput	flag_test.go	/^func TestIntFlagWithEnvVarHelpOutput(t *testing.T) {$/;"	f	package:cli
TestIntSliceApplyInputSourceMethodContextSet	altsrc/flag_test.go	/^func TestIntSliceApplyInputSourceMethodContextSet(t *testing.T) {$/;"	f	package:altsrc
TestIntSliceApplyInputSourceMethodEnvVarSet	altsrc/flag_test.go	/^func TestIntSliceApplyInputSourceMethodEnvVarSet(t *testing.T) {$/;"	f	package:altsrc
TestIntSliceApplyInputSourceValue	altsrc/flag_test.go	/^func TestIntSliceApplyInputSourceValue(t *testing.T) {$/;"	f	package:altsrc
TestIntSliceFlagApply_ParentContext	flag_test.go	/^func TestIntSliceFlagApply_ParentContext(t *testing.T) {$/;"	f	package:cli
TestIntSliceFlagApply_SetsAllNames	flag_test.go	/^func TestIntSliceFlagApply_SetsAllNames(t *testing.T) {$/;"	f	package:cli
TestIntSliceFlagHelpOutput	flag_test.go	/^func TestIntSliceFlagHelpOutput(t *testing.T) {$/;"	f	package:cli
TestIntSliceFlagWithEnvVarHelpOutput	flag_test.go	/^func TestIntSliceFlagWithEnvVarHelpOutput(t *testing.T) {$/;"	f	package:cli
TestIntSliceFlag_SetFromParentContext	flag_test.go	/^func TestIntSliceFlag_SetFromParentContext(t *testing.T) {$/;"	f	package:cli
TestIntSlice_Serialized_Set	flag_test.go	/^func TestIntSlice_Serialized_Set(t *testing.T) {$/;"	f	package:cli
TestLexicographicLess	sort_test.go	/^func TestLexicographicLess(t *testing.T) {$/;"	f	package:cli
TestMapDuration	altsrc/map_input_source_test.go	/^func TestMapDuration(t *testing.T) {$/;"	f	package:altsrc
TestNewContext	context_test.go	/^func TestNewContext(t *testing.T) {$/;"	f	package:cli
TestNonNilContext	context_test.go	/^func TestNonNilContext(t *testing.T) {$/;"	f	package:cli
TestParseAndRunShortOpts	command_test.go	/^func TestParseAndRunShortOpts(t *testing.T) {$/;"	f	package:cli
TestParseBoolFromEnv	flag_test.go	/^func TestParseBoolFromEnv(t *testing.T) {$/;"	f	package:cli
TestParseBoolShortOptionHandle	flag_test.go	/^func TestParseBoolShortOptionHandle(t *testing.T) {$/;"	f	package:cli
TestParseDestinationBool	flag_test.go	/^func TestParseDestinationBool(t *testing.T) {$/;"	f	package:cli
TestParseDestinationFloat64	flag_test.go	/^func TestParseDestinationFloat64(t *testing.T) {$/;"	f	package:cli
TestParseDestinationInt	flag_test.go	/^func TestParseDestinationInt(t *testing.T) {$/;"	f	package:cli
TestParseDestinationString	flag_test.go	/^func TestParseDestinationString(t *testing.T) {$/;"	f	package:cli
TestParseGeneric	flag_test.go	/^func TestParseGeneric(t *testing.T) {$/;"	f	package:cli
TestParseGenericFromEnv	flag_test.go	/^func TestParseGenericFromEnv(t *testing.T) {$/;"	f	package:cli
TestParseGenericFromEnvCascade	flag_test.go	/^func TestParseGenericFromEnvCascade(t *testing.T) {$/;"	f	package:cli
TestParseMultiBool	flag_test.go	/^func TestParseMultiBool(t *testing.T) {$/;"	f	package:cli
TestParseMultiBoolFromEnv	flag_test.go	/^func TestParseMultiBoolFromEnv(t *testing.T) {$/;"	f	package:cli
TestParseMultiBoolFromEnvCascade	flag_test.go	/^func TestParseMultiBoolFromEnvCascade(t *testing.T) {$/;"	f	package:cli
TestParseMultiBoolT	flag_test.go	/^func TestParseMultiBoolT(t *testing.T) {$/;"	f	package:cli
TestParseMultiFloat64	flag_test.go	/^func TestParseMultiFloat64(t *testing.T) {$/;"	f	package:cli
TestParseMultiFloat64FromEnv	flag_test.go	/^func TestParseMultiFloat64FromEnv(t *testing.T) {$/;"	f	package:cli
TestParseMultiFloat64FromEnvCascade	flag_test.go	/^func TestParseMultiFloat64FromEnvCascade(t *testing.T) {$/;"	f	package:cli
TestParseMultiFloat64SliceFromEnv	flag_test.go	/^func TestParseMultiFloat64SliceFromEnv(t *testing.T) {$/;"	f	package:cli
TestParseMultiFloat64SliceFromEnvCascade	flag_test.go	/^func TestParseMultiFloat64SliceFromEnvCascade(t *testing.T) {$/;"	f	package:cli
TestParseMultiInt	flag_test.go	/^func TestParseMultiInt(t *testing.T) {$/;"	f	package:cli
TestParseMultiInt64Slice	flag_test.go	/^func TestParseMultiInt64Slice(t *testing.T) {$/;"	f	package:cli
TestParseMultiInt64SliceFromEnv	flag_test.go	/^func TestParseMultiInt64SliceFromEnv(t *testing.T) {$/;"	f	package:cli
TestParseMultiInt64SliceFromEnvCascade	flag_test.go	/^func TestParseMultiInt64SliceFromEnvCascade(t *testing.T) {$/;"	f	package:cli
TestParseMultiIntFromEnv	flag_test.go	/^func TestParseMultiIntFromEnv(t *testing.T) {$/;"	f	package:cli
TestParseMultiIntFromEnvCascade	flag_test.go	/^func TestParseMultiIntFromEnvCascade(t *testing.T) {$/;"	f	package:cli
TestParseMultiIntSlice	flag_test.go	/^func TestParseMultiIntSlice(t *testing.T) {$/;"	f	package:cli
TestParseMultiIntSliceFromEnv	flag_test.go	/^func TestParseMultiIntSliceFromEnv(t *testing.T) {$/;"	f	package:cli
TestParseMultiIntSliceFromEnvCascade	flag_test.go	/^func TestParseMultiIntSliceFromEnvCascade(t *testing.T) {$/;"	f	package:cli
TestParseMultiIntSliceFromEnvWithDefaults	flag_test.go	/^func TestParseMultiIntSliceFromEnvWithDefaults(t *testing.T) {$/;"	f	package:cli
TestParseMultiIntSliceWithDefaults	flag_test.go	/^func TestParseMultiIntSliceWithDefaults(t *testing.T) {$/;"	f	package:cli
TestParseMultiIntSliceWithDefaultsUnset	flag_test.go	/^func TestParseMultiIntSliceWithDefaultsUnset(t *testing.T) {$/;"	f	package:cli
TestParseMultiString	flag_test.go	/^func TestParseMultiString(t *testing.T) {$/;"	f	package:cli
TestParseMultiStringFromEnv	flag_test.go	/^func TestParseMultiStringFromEnv(t *testing.T) {$/;"	f	package:cli
TestParseMultiStringFromEnvCascade	flag_test.go	/^func TestParseMultiStringFromEnvCascade(t *testing.T) {$/;"	f	package:cli
TestParseMultiStringSlice	flag_test.go	/^func TestParseMultiStringSlice(t *testing.T) {$/;"	f	package:cli
TestParseMultiStringSliceFromEnv	flag_test.go	/^func TestParseMultiStringSliceFromEnv(t *testing.T) {$/;"	f	package:cli
TestParseMultiStringSliceFromEnvCascade	flag_test.go	/^func TestParseMultiStringSliceFromEnvCascade(t *testing.T) {$/;"	f	package:cli
TestParseMultiStringSliceFromEnvCascadeWithDefaults	flag_test.go	/^func TestParseMultiStringSliceFromEnvCascadeWithDefaults(t *testing.T) {$/;"	f	package:cli
TestParseMultiStringSliceFromEnvWithDefaults	flag_test.go	/^func TestParseMultiStringSliceFromEnvWithDefaults(t *testing.T) {$/;"	f	package:cli
TestParseMultiStringSliceFromEnvWithDestination	flag_test.go	/^func TestParseMultiStringSliceFromEnvWithDestination(t *testing.T) {$/;"	f	package:cli
TestParseMultiStringSliceWithDefaults	flag_test.go	/^func TestParseMultiStringSliceWithDefaults(t *testing.T) {$/;"	f	package:cli
TestParseMultiStringSliceWithDefaultsUnset	flag_test.go	/^func TestParseMultiStringSliceWithDefaultsUnset(t *testing.T) {$/;"	f	package:cli
TestParseMultiStringSliceWithDestination	flag_test.go	/^func TestParseMultiStringSliceWithDestination(t *testing.T) {$/;"	f	package:cli
TestParseMultiStringSliceWithDestinationAndEnv	flag_test.go	/^func TestParseMultiStringSliceWithDestinationAndEnv(t *testing.T) {$/;"	f	package:cli
TestPathApplyInputSourceMethodContextSet	altsrc/flag_test.go	/^func TestPathApplyInputSourceMethodContextSet(t *testing.T) {$/;"	f	package:altsrc
TestPathApplyInputSourceMethodEnvVarSet	altsrc/flag_test.go	/^func TestPathApplyInputSourceMethodEnvVarSet(t *testing.T) {$/;"	f	package:altsrc
TestPathApplyInputSourceMethodSet	altsrc/flag_test.go	/^func TestPathApplyInputSourceMethodSet(t *testing.T) {$/;"	f	package:altsrc
TestPathFlagApply_SetsAllNames	flag_test.go	/^func TestPathFlagApply_SetsAllNames(t *testing.T) {$/;"	f	package:cli
TestPathFlagHelpOutput	flag_test.go	/^func TestPathFlagHelpOutput(t *testing.T) {$/;"	f	package:cli
TestPathFlagWithEnvVarHelpOutput	flag_test.go	/^func TestPathFlagWithEnvVarHelpOutput(t *testing.T) {$/;"	f	package:cli
TestRequiredFlagAppRunBehavior	app_test.go	/^func TestRequiredFlagAppRunBehavior(t *testing.T) {$/;"	f	package:cli
TestSetupInitializesBothWriters	app_test.go	/^func TestSetupInitializesBothWriters(t *testing.T) {$/;"	f	package:cli
TestSetupInitializesOnlyNilWriters	app_test.go	/^func TestSetupInitializesOnlyNilWriters(t *testing.T) {$/;"	f	package:cli
TestShellCompletionForIncompleteFlags	app_test.go	/^func TestShellCompletionForIncompleteFlags(t *testing.T) {$/;"	f	package:cli
TestShowAppHelp_CommandAliases	help_test.go	/^func TestShowAppHelp_CommandAliases(t *testing.T) {$/;"	f	package:cli
TestShowAppHelp_CustomAppTemplate	help_test.go	/^func TestShowAppHelp_CustomAppTemplate(t *testing.T) {$/;"	f	package:cli
TestShowAppHelp_HelpPrinter	help_test.go	/^func TestShowAppHelp_HelpPrinter(t *testing.T) {$/;"	f	package:cli
TestShowAppHelp_HelpPrinterCustom	help_test.go	/^func TestShowAppHelp_HelpPrinterCustom(t *testing.T) {$/;"	f	package:cli
TestShowAppHelp_HiddenCommand	help_test.go	/^func TestShowAppHelp_HiddenCommand(t *testing.T) {$/;"	f	package:cli
TestShowCommandHelp_CommandAliases	help_test.go	/^func TestShowCommandHelp_CommandAliases(t *testing.T) {$/;"	f	package:cli
TestShowCommandHelp_Customtemplate	help_test.go	/^func TestShowCommandHelp_Customtemplate(t *testing.T) {$/;"	f	package:cli
TestShowCommandHelp_HelpPrinter	help_test.go	/^func TestShowCommandHelp_HelpPrinter(t *testing.T) {$/;"	f	package:cli
TestShowCommandHelp_HelpPrinterCustom	help_test.go	/^func TestShowCommandHelp_HelpPrinterCustom(t *testing.T) {$/;"	f	package:cli
TestShowSubcommandHelp_CommandAliases	help_test.go	/^func TestShowSubcommandHelp_CommandAliases(t *testing.T) {$/;"	f	package:cli
TestShowSubcommandHelp_CommandUsageText	help_test.go	/^func TestShowSubcommandHelp_CommandUsageText(t *testing.T) {$/;"	f	package:cli
TestShowSubcommandHelp_SubcommandUsageText	help_test.go	/^func TestShowSubcommandHelp_SubcommandUsageText(t *testing.T) {$/;"	f	package:cli
TestStringApplyInputSourceMethodContextSet	altsrc/flag_test.go	/^func TestStringApplyInputSourceMethodContextSet(t *testing.T) {$/;"	f	package:altsrc
TestStringApplyInputSourceMethodEnvVarSet	altsrc/flag_test.go	/^func TestStringApplyInputSourceMethodEnvVarSet(t *testing.T) {$/;"	f	package:altsrc
TestStringApplyInputSourceMethodSet	altsrc/flag_test.go	/^func TestStringApplyInputSourceMethodSet(t *testing.T) {$/;"	f	package:altsrc
TestStringFlagApply_SetsAllNames	flag_test.go	/^func TestStringFlagApply_SetsAllNames(t *testing.T) {$/;"	f	package:cli
TestStringFlagDefaultText	flag_test.go	/^func TestStringFlagDefaultText(t *testing.T) {$/;"	f	package:cli
TestStringFlagHelpOutput	flag_test.go	/^func TestStringFlagHelpOutput(t *testing.T) {$/;"	f	package:cli
TestStringFlagWithEnvVarHelpOutput	flag_test.go	/^func TestStringFlagWithEnvVarHelpOutput(t *testing.T) {$/;"	f	package:cli
TestStringSliceApplyInputSourceMethodContextSet	altsrc/flag_test.go	/^func TestStringSliceApplyInputSourceMethodContextSet(t *testing.T) {$/;"	f	package:altsrc
TestStringSliceApplyInputSourceMethodEnvVarSet	altsrc/flag_test.go	/^func TestStringSliceApplyInputSourceMethodEnvVarSet(t *testing.T) {$/;"	f	package:altsrc
TestStringSliceApplyInputSourceValue	altsrc/flag_test.go	/^func TestStringSliceApplyInputSourceValue(t *testing.T) {$/;"	f	package:altsrc
TestStringSliceFlagApply_DefaultValueWithDestination	flag_test.go	/^func TestStringSliceFlagApply_DefaultValueWithDestination(t *testing.T) {$/;"	f	package:cli
TestStringSliceFlagApply_SetsAllNames	flag_test.go	/^func TestStringSliceFlagApply_SetsAllNames(t *testing.T) {$/;"	f	package:cli
TestStringSliceFlagApply_UsesEnvValues	flag_test.go	/^func TestStringSliceFlagApply_UsesEnvValues(t *testing.T) {$/;"	f	package:cli
TestStringSliceFlagHelpOutput	flag_test.go	/^func TestStringSliceFlagHelpOutput(t *testing.T) {$/;"	f	package:cli
TestStringSliceFlagWithEnvVarHelpOutput	flag_test.go	/^func TestStringSliceFlagWithEnvVarHelpOutput(t *testing.T) {$/;"	f	package:cli
TestStringSlice_Serialized_Set	flag_test.go	/^func TestStringSlice_Serialized_Set(t *testing.T) {$/;"	f	package:cli
TestTimestampFlagApply	flag_test.go	/^func TestTimestampFlagApply(t *testing.T) {$/;"	f	package:cli
TestTimestampFlagApplyValue	flag_test.go	/^func TestTimestampFlagApplyValue(t *testing.T) {$/;"	f	package:cli
TestTimestampFlagApply_Fail_Parse_Wrong_Layout	flag_test.go	/^func TestTimestampFlagApply_Fail_Parse_Wrong_Layout(t *testing.T) {$/;"	f	package:cli
TestTimestampFlagApply_Fail_Parse_Wrong_Time	flag_test.go	/^func TestTimestampFlagApply_Fail_Parse_Wrong_Time(t *testing.T) {$/;"	f	package:cli
TestTimestampFlagApply_WithDestination	flag_test.go	/^func TestTimestampFlagApply_WithDestination(t *testing.T) {$/;"	f	package:cli
TestTimestamp_set	flag_test.go	/^func TestTimestamp_set(t *testing.T) {$/;"	f	package:cli
TestToMan	docs_test.go	/^func TestToMan(t *testing.T) {$/;"	f	package:cli
TestToManParseError	docs_test.go	/^func TestToManParseError(t *testing.T) {$/;"	f	package:cli
TestToManWithSection	docs_test.go	/^func TestToManWithSection(t *testing.T) {$/;"	f	package:cli
TestToMarkdownFull	docs_test.go	/^func TestToMarkdownFull(t *testing.T) {$/;"	f	package:cli
TestToMarkdownNoAuthors	docs_test.go	/^func TestToMarkdownNoAuthors(t *testing.T) {$/;"	f	package:cli
TestToMarkdownNoCommands	docs_test.go	/^func TestToMarkdownNoCommands(t *testing.T) {$/;"	f	package:cli
TestToMarkdownNoFlags	docs_test.go	/^func TestToMarkdownNoFlags(t *testing.T) {$/;"	f	package:cli
TestUint64FlagHelpOutput	flag_test.go	/^func TestUint64FlagHelpOutput(t *testing.T) {$/;"	f	package:cli
TestUint64FlagWithEnvVarHelpOutput	flag_test.go	/^func TestUint64FlagWithEnvVarHelpOutput(t *testing.T) {$/;"	f	package:cli
TestUintFlagHelpOutput	flag_test.go	/^func TestUintFlagHelpOutput(t *testing.T) {$/;"	f	package:cli
TestUintFlagWithEnvVarHelpOutput	flag_test.go	/^func TestUintFlagWithEnvVarHelpOutput(t *testing.T) {$/;"	f	package:cli
TestWhenExitSubCommandWithCodeThenAppQuitUnexpectedly	app_test.go	/^func TestWhenExitSubCommandWithCodeThenAppQuitUnexpectedly(t *testing.T) {$/;"	f	package:cli
TestWrappedCommandHelp	help_test.go	/^func TestWrappedCommandHelp(t *testing.T) {$/;"	f	package:cli
TestWrappedHelp	help_test.go	/^func TestWrappedHelp(t *testing.T) {$/;"	f	package:cli
TestWrappedSubcommandHelp	help_test.go	/^func TestWrappedSubcommandHelp(t *testing.T) {$/;"	f	package:cli
Test_Help_Custom_Flags	help_test.go	/^func Test_Help_Custom_Flags(t *testing.T) {$/;"	f	package:cli
Test_ShowAppHelp_HideVersion	help_test.go	/^func Test_ShowAppHelp_HideVersion(t *testing.T) {$/;"	f	package:cli
Test_ShowAppHelp_MultiLineDescription	help_test.go	/^func Test_ShowAppHelp_MultiLineDescription(t *testing.T) {$/;"	f	package:cli
Test_ShowAppHelp_NoAuthor	help_test.go	/^func Test_ShowAppHelp_NoAuthor(t *testing.T) {$/;"	f	package:cli
Test_ShowAppHelp_NoVersion	help_test.go	/^func Test_ShowAppHelp_NoVersion(t *testing.T) {$/;"	f	package:cli
Test_Version_Custom_Flags	help_test.go	/^func Test_Version_Custom_Flags(t *testing.T) {$/;"	f	package:cli
Test_helpCommand_Action_ErrorIfNoTopic	help_test.go	/^func Test_helpCommand_Action_ErrorIfNoTopic(t *testing.T) {$/;"	f	package:cli
Test_helpCommand_InHelpOutput	help_test.go	/^func Test_helpCommand_InHelpOutput(t *testing.T) {$/;"	f	package:cli
Test_helpSubcommand_Action_ErrorIfNoTopic	help_test.go	/^func Test_helpSubcommand_Action_ErrorIfNoTopic(t *testing.T) {$/;"	f	package:cli
Testing	.github/pull_request_template.md	/^## Testing$/;"	s
Timestamp	flag_timestamp.go	/^func (c *Context) Timestamp(name string) *time.Time {$/;"	f	unknown:cli.Context	typeref:typename:*time.Time
Timestamp	flag_timestamp.go	/^type Timestamp struct {$/;"	s	package:cli
Timestamp Flag	docs/v2/manual.md	/^### Timestamp Flag$/;"	S
TimestampFlag	flag_timestamp.go	/^type TimestampFlag struct {$/;"	s	package:cli
To reproduce	.github/ISSUE_TEMPLATE/v1-bug-report.md	/^## To reproduce$/;"	s
To reproduce	.github/ISSUE_TEMPLATE/v2-bug-report.md	/^## To reproduce$/;"	s
ToFishCompletion	fish.go	/^func (a *App) ToFishCompletion() (string, error) {$/;"	f	unknown:cli.App	typeref:typename:(string, error)
ToMan	docs.go	/^func (a *App) ToMan() (string, error) {$/;"	f	unknown:cli.App	typeref:typename:(string, error)
ToManWithSection	docs.go	/^func (a *App) ToManWithSection(sectionNumber int) (string, error) {$/;"	f	unknown:cli.App	typeref:typename:(string, error)
ToMarkdown	docs.go	/^func (a *App) ToMarkdown() (string, error) {$/;"	f	unknown:cli.App	typeref:typename:(string, error)
ToString	flag_choice.go	/^func (c *defaultChoice) ToString(v interface{}) string {$/;"	f	unknown:cli.defaultChoice	typeref:typename:string
Total	app_test.go	/^	Total, ShellComplete, OnUsageError, Before, CommandNotFound, Action, After, SubCommand int$/;"	m	struct:cli.opCounts	typeref:typename:int
Uint	flag_uint.go	/^func (c *Context) Uint(name string) uint {$/;"	f	unknown:cli.Context	typeref:typename:uint
Uint64	flag_uint64.go	/^func (c *Context) Uint64(name string) uint64 {$/;"	f	unknown:cli.Context	typeref:typename:uint64
Uint64Flag	altsrc/flag_generated.go	/^	*cli.Uint64Flag$/;"	M	struct:altsrc.Uint64Flag	typeref:typename:*cli.Uint64Flag
Uint64Flag	altsrc/flag_generated.go	/^type Uint64Flag struct {$/;"	s	package:altsrc
Uint64Flag	flag_uint64.go	/^type Uint64Flag struct {$/;"	s	package:cli
UintFlag	altsrc/flag_generated.go	/^	*cli.UintFlag$/;"	M	struct:altsrc.UintFlag	typeref:typename:*cli.UintFlag
UintFlag	altsrc/flag_generated.go	/^type UintFlag struct {$/;"	s	package:altsrc
UintFlag	flag_uint.go	/^type UintFlag struct {$/;"	s	package:cli
UnmarshalTOML	altsrc/toml_file_loader.go	/^func (tm *tomlMap) UnmarshalTOML(i interface{}) error {$/;"	f	unknown:altsrc.tomlMap	typeref:typename:error
Unreleased - 1.22.X series	docs/CHANGELOG.md	/^## Unreleased - 1.22.X series$/;"	s
Unreleased - 2.X series	docs/CHANGELOG.md	/^## Unreleased - 2.X series$/;"	s
Usage	app.go	/^	Usage string$/;"	m	struct:cli.App	typeref:typename:string
Usage	command.go	/^	Usage string$/;"	m	struct:cli.Command	typeref:typename:string
Usage	flag_bool.go	/^	Usage            string$/;"	m	struct:cli.BoolFlag	typeref:typename:string
Usage	flag_choice.go	/^	Usage       string$/;"	m	struct:cli.ChoiceFlag	typeref:typename:string
Usage	flag_duration.go	/^	Usage       string$/;"	m	struct:cli.DurationFlag	typeref:typename:string
Usage	flag_float64.go	/^	Usage       string$/;"	m	struct:cli.Float64Flag	typeref:typename:string
Usage	flag_float64_slice.go	/^	Usage       string$/;"	m	struct:cli.Float64SliceFlag	typeref:typename:string
Usage	flag_generic.go	/^	Usage       string$/;"	m	struct:cli.GenericFlag	typeref:typename:string
Usage	flag_int.go	/^	Usage       string$/;"	m	struct:cli.IntFlag	typeref:typename:string
Usage	flag_int64.go	/^	Usage       string$/;"	m	struct:cli.Int64Flag	typeref:typename:string
Usage	flag_int64_slice.go	/^	Usage       string$/;"	m	struct:cli.Int64SliceFlag	typeref:typename:string
Usage	flag_int_slice.go	/^	Usage       string$/;"	m	struct:cli.IntSliceFlag	typeref:typename:string
Usage	flag_path.go	/^	Usage       string$/;"	m	struct:cli.PathFlag	typeref:typename:string
Usage	flag_string.go	/^	Usage       string$/;"	m	struct:cli.StringFlag	typeref:typename:string
Usage	flag_string_slice.go	/^	Usage       string$/;"	m	struct:cli.StringSliceFlag	typeref:typename:string
Usage	flag_timestamp.go	/^	Usage       string$/;"	m	struct:cli.TimestampFlag	typeref:typename:string
Usage	flag_uint.go	/^	Usage       string$/;"	m	struct:cli.UintFlag	typeref:typename:string
Usage	flag_uint64.go	/^	Usage       string$/;"	m	struct:cli.Uint64Flag	typeref:typename:string
Usage Documentation	README.md	/^## Usage Documentation$/;"	s
UsageText	app.go	/^	UsageText string$/;"	m	struct:cli.App	typeref:typename:string
UsageText	command.go	/^	UsageText string$/;"	m	struct:cli.Command	typeref:typename:string
UseShortOptionHandling	app.go	/^	UseShortOptionHandling bool$/;"	m	struct:cli.App	typeref:typename:bool
UseShortOptionHandling	command.go	/^	UseShortOptionHandling bool$/;"	m	struct:cli.Command	typeref:typename:bool
Using `v1` releases	README.md	/^### Using `v1` releases$/;"	S
Using `v2` releases	README.md	/^### Using `v2` releases$/;"	S
Value	context.go	/^func (c *Context) Value(name string) interface{} {$/;"	f	unknown:cli.Context	typeref:typename:interface{}
Value	flag_bool.go	/^	Value            bool$/;"	m	struct:cli.BoolFlag	typeref:typename:bool
Value	flag_choice.go	/^	Value       interface{}$/;"	m	struct:cli.ChoiceFlag	typeref:typename:interface{}
Value	flag_choice.go	/^func (c *choiceValue) Value() interface{} {$/;"	f	unknown:cli.choiceValue	typeref:typename:interface{}
Value	flag_duration.go	/^	Value       time.Duration$/;"	m	struct:cli.DurationFlag	typeref:typename:time.Duration
Value	flag_float64.go	/^	Value       float64$/;"	m	struct:cli.Float64Flag	typeref:typename:float64
Value	flag_float64_slice.go	/^	Value       *Float64Slice$/;"	m	struct:cli.Float64SliceFlag	typeref:typename:*Float64Slice
Value	flag_float64_slice.go	/^func (f *Float64Slice) Value() []float64 {$/;"	f	unknown:cli.Float64Slice	typeref:typename:[]float64
Value	flag_generic.go	/^	Value       Generic$/;"	m	struct:cli.GenericFlag	typeref:typename:Generic
Value	flag_int.go	/^	Value       int$/;"	m	struct:cli.IntFlag	typeref:typename:int
Value	flag_int64.go	/^	Value       int64$/;"	m	struct:cli.Int64Flag	typeref:typename:int64
Value	flag_int64_slice.go	/^	Value       *Int64Slice$/;"	m	struct:cli.Int64SliceFlag	typeref:typename:*Int64Slice
Value	flag_int64_slice.go	/^func (i *Int64Slice) Value() []int64 {$/;"	f	unknown:cli.Int64Slice	typeref:typename:[]int64
Value	flag_int_slice.go	/^	Value       *IntSlice$/;"	m	struct:cli.IntSliceFlag	typeref:typename:*IntSlice
Value	flag_int_slice.go	/^func (i *IntSlice) Value() []int {$/;"	f	unknown:cli.IntSlice	typeref:typename:[]int
Value	flag_path.go	/^	Value       string$/;"	m	struct:cli.PathFlag	typeref:typename:string
Value	flag_string.go	/^	Value       string$/;"	m	struct:cli.StringFlag	typeref:typename:string
Value	flag_string_slice.go	/^	Value       *StringSlice$/;"	m	struct:cli.StringSliceFlag	typeref:typename:*StringSlice
Value	flag_string_slice.go	/^func (s *StringSlice) Value() []string {$/;"	f	unknown:cli.StringSlice	typeref:typename:[]string
Value	flag_timestamp.go	/^	Value       *Timestamp$/;"	m	struct:cli.TimestampFlag	typeref:typename:*Timestamp
Value	flag_timestamp.go	/^func (t *Timestamp) Value() *time.Time {$/;"	f	unknown:cli.Timestamp	typeref:typename:*time.Time
Value	flag_uint.go	/^	Value       uint$/;"	m	struct:cli.UintFlag	typeref:typename:uint
Value	flag_uint64.go	/^	Value       uint64$/;"	m	struct:cli.Uint64Flag	typeref:typename:uint64
Values from alternate input sources (YAML, TOML, and others)	docs/v1/manual.md	/^#### Values from alternate input sources (YAML, TOML, and others)$/;"	t
Values from alternate input sources (YAML, TOML, and others)	docs/v2/manual.md	/^#### Values from alternate input sources (YAML, TOML, and others)$/;"	t
Values from files	docs/v1/manual.md	/^#### Values from files$/;"	t
Values from files	docs/v2/manual.md	/^#### Values from files$/;"	t
Values from the Environment	docs/v1/manual.md	/^#### Values from the Environment$/;"	t
Values from the Environment	docs/v2/manual.md	/^#### Values from the Environment$/;"	t
Version	app.go	/^	Version string$/;"	m	struct:cli.App	typeref:typename:string
Version Flag	docs/v1/manual.md	/^### Version Flag$/;"	S
Version Flag	docs/v2/manual.md	/^### Version Flag$/;"	S
VersionFlag	flag.go	/^var VersionFlag Flag = &BoolFlag{$/;"	v	package:cli
VersionPrinter	help.go	/^var VersionPrinter = printVersion$/;"	v	package:cli
VisibleCategories	app.go	/^func (a *App) VisibleCategories() []CommandCategory {$/;"	f	unknown:cli.App	typeref:typename:[]CommandCategory
VisibleCommands	app.go	/^func (a *App) VisibleCommands() []*Command {$/;"	f	unknown:cli.App	typeref:typename:[]*Command
VisibleCommands	category.go	/^func (c *commandCategory) VisibleCommands() []*Command {$/;"	f	unknown:cli.commandCategory	typeref:typename:[]*Command
VisibleFlag	flag.go	/^type VisibleFlag interface {$/;"	i	package:cli
VisibleFlags	app.go	/^func (a *App) VisibleFlags() []Flag {$/;"	f	unknown:cli.App	typeref:typename:[]Flag
VisibleFlags	command.go	/^func (c *Command) VisibleFlags() []Flag {$/;"	f	unknown:cli.Command	typeref:typename:[]Flag
Want to fix this yourself?	.github/ISSUE_TEMPLATE/v1-bug-report.md	/^## Want to fix this yourself?$/;"	s
Want to fix this yourself?	.github/ISSUE_TEMPLATE/v2-bug-report.md	/^## Want to fix this yourself?$/;"	s
What problem does this solve?	.github/ISSUE_TEMPLATE/v2-feature-request.md	/^## What problem does this solve?$/;"	s
What this PR does / why we need it:	.github/pull_request_template.md	/^## What this PR does \/ why we need it:$/;"	s
What type of PR is this?	.github/pull_request_template.md	/^## What type of PR is this?$/;"	s
Which issue(s) this PR fixes:	.github/pull_request_template.md	/^## Which issue(s) this PR fixes:$/;"	s
Writer	app.go	/^	Writer io.Writer$/;"	m	struct:cli.App	typeref:typename:io.Writer
ZSH Support	docs/v2/manual.md	/^#### ZSH Support$/;"	t
ZSH custom auto-complete example	docs/v2/manual.md	/^#### ZSH custom auto-complete example$/;"	t
ZSH default auto-complete example	docs/v2/manual.md	/^#### ZSH default auto-complete example$/;"	t
[1.0.0] - 2013-11-01	docs/CHANGELOG.md	/^## [1.0.0] - 2013-11-01$/;"	s
[1.1.0] - 2014-07-15	docs/CHANGELOG.md	/^## [1.1.0] - 2014-07-15$/;"	s
[1.10.0] - 2015-10-06 (backfilled 2016-04-25)	docs/CHANGELOG.md	/^## [1.10.0] - 2015-10-06 (backfilled 2016-04-25)$/;"	s
[1.10.1] - 2015-10-21 (backfilled 2016-04-25)	docs/CHANGELOG.md	/^## [1.10.1] - 2015-10-21 (backfilled 2016-04-25)$/;"	s
[1.10.2] - 2015-10-29 (backfilled 2016-04-25)	docs/CHANGELOG.md	/^## [1.10.2] - 2015-10-29 (backfilled 2016-04-25)$/;"	s
[1.11.0] - 2015-11-15 (backfilled 2016-04-25)	docs/CHANGELOG.md	/^## [1.11.0] - 2015-11-15 (backfilled 2016-04-25)$/;"	s
[1.11.1] - 2015-12-21 (backfilled 2016-04-25)	docs/CHANGELOG.md	/^## [1.11.1] - 2015-12-21 (backfilled 2016-04-25)$/;"	s
[1.12.0] - 2016-02-17 (backfilled 2016-04-25)	docs/CHANGELOG.md	/^## [1.12.0] - 2016-02-17 (backfilled 2016-04-25)$/;"	s
[1.13.0] - 2016-03-06 (backfilled 2016-04-25)	docs/CHANGELOG.md	/^## [1.13.0] - 2016-03-06 (backfilled 2016-04-25)$/;"	s
[1.14.0] - 2016-04-03 (backfilled 2016-04-25)	docs/CHANGELOG.md	/^## [1.14.0] - 2016-04-03 (backfilled 2016-04-25)$/;"	s
[1.15.0] - 2016-04-30	docs/CHANGELOG.md	/^## [1.15.0] - 2016-04-30$/;"	s
[1.16.0] - 2016-05-02	docs/CHANGELOG.md	/^## [1.16.0] - 2016-05-02$/;"	s
[1.16.1] - 2016-08-28	docs/CHANGELOG.md	/^## [1.16.1] - 2016-08-28$/;"	s
[1.17.0] - 2016-05-09	docs/CHANGELOG.md	/^## [1.17.0] - 2016-05-09$/;"	s
[1.17.1] - 2016-08-28	docs/CHANGELOG.md	/^## [1.17.1] - 2016-08-28$/;"	s
[1.18.0] - 2016-06-27	docs/CHANGELOG.md	/^## [1.18.0] - 2016-06-27$/;"	s
[1.18.1] - 2016-08-28	docs/CHANGELOG.md	/^## [1.18.1] - 2016-08-28$/;"	s
[1.19.0] - 2016-11-19	docs/CHANGELOG.md	/^## [1.19.0] - 2016-11-19$/;"	s
[1.19.1] - 2016-11-21	docs/CHANGELOG.md	/^## [1.19.1] - 2016-11-21$/;"	s
[1.2.0] - 2014-08-02	docs/CHANGELOG.md	/^## [1.2.0] - 2014-08-02$/;"	s
[1.20.0] - 2017-08-10	docs/CHANGELOG.md	/^## [1.20.0] - 2017-08-10$/;"	s
[1.21.0] - 2019-08-02	docs/CHANGELOG.md	/^## [1.21.0] - 2019-08-02$/;"	s
[1.22.0] - 2019-09-07	docs/CHANGELOG.md	/^## [1.22.0] - 2019-09-07$/;"	s
[1.22.1] - 2019-09-11	docs/CHANGELOG.md	/^## [1.22.1] - 2019-09-11$/;"	s
[1.22.2] - 2019-11-17	docs/CHANGELOG.md	/^## [1.22.2] - 2019-11-17$/;"	s
[1.22.3] - 2020-02-25	docs/CHANGELOG.md	/^## [1.22.3] - 2020-02-25$/;"	s
[1.22.4] - 2020-03-31	docs/CHANGELOG.md	/^## [1.22.4] - 2020-03-31$/;"	s
[1.3.0] - 2014-08-10 (backfilled 2016-04-25)	docs/CHANGELOG.md	/^## [1.3.0] - 2014-08-10 (backfilled 2016-04-25)$/;"	s
[1.3.1] - 2014-11-13 (backfilled 2016-04-25)	docs/CHANGELOG.md	/^## [1.3.1] - 2014-11-13 (backfilled 2016-04-25)$/;"	s
[1.4.0] - 2014-12-12 (backfilled 2016-04-25)	docs/CHANGELOG.md	/^## [1.4.0] - 2014-12-12 (backfilled 2016-04-25)$/;"	s
[1.4.1] - 2015-01-09 (backfilled 2016-04-25)	docs/CHANGELOG.md	/^## [1.4.1] - 2015-01-09 (backfilled 2016-04-25)$/;"	s
[1.5.0] - 2015-02-20 (backfilled 2016-04-25)	docs/CHANGELOG.md	/^## [1.5.0] - 2015-02-20 (backfilled 2016-04-25)$/;"	s
[1.6.0] - 2015-03-23 (backfilled 2016-04-25)	docs/CHANGELOG.md	/^## [1.6.0] - 2015-03-23 (backfilled 2016-04-25)$/;"	s
[1.7.0] - 2015-05-03 (backfilled 2016-04-25)	docs/CHANGELOG.md	/^## [1.7.0] - 2015-05-03 (backfilled 2016-04-25)$/;"	s
[1.7.1] - 2015-06-11 (backfilled 2016-04-25)	docs/CHANGELOG.md	/^## [1.7.1] - 2015-06-11 (backfilled 2016-04-25)$/;"	s
[1.8.0] - 2015-06-30 (backfilled 2016-04-25)	docs/CHANGELOG.md	/^## [1.8.0] - 2015-06-30 (backfilled 2016-04-25)$/;"	s
[1.9.0] - 2015-09-08 (backfilled 2016-04-25)	docs/CHANGELOG.md	/^## [1.9.0] - 2015-09-08 (backfilled 2016-04-25)$/;"	s
[2.0.0] - 2019-11-17	docs/CHANGELOG.md	/^## [2.0.0] - 2019-11-17$/;"	s
[2.1.0] - 2019-12-24	docs/CHANGELOG.md	/^## [2.1.0] - 2019-12-24$/;"	s
[2.1.1] - 2019-12-24	docs/CHANGELOG.md	/^## [2.1.1] - 2019-12-24$/;"	s
[2.2.0] - 2020-03-08	docs/CHANGELOG.md	/^## [2.2.0] - 2020-03-08$/;"	s
_	altsrc/helpers_test.go	/^	wd, _ = os.Getwd()$/;"	v	package:altsrc
_cli_bash_autocomplete	autocomplete/bash_autocomplete	/^_cli_bash_autocomplete() {$/;"	f
altsrc	altsrc/default_input_source.go	/^package altsrc$/;"	p
altsrc	altsrc/flag.go	/^package altsrc$/;"	p
altsrc	altsrc/flag_generated.go	/^package altsrc$/;"	p
altsrc	altsrc/flag_test.go	/^package altsrc$/;"	p
altsrc	altsrc/helpers_test.go	/^package altsrc$/;"	p
altsrc	altsrc/input_source_context.go	/^package altsrc$/;"	p
altsrc	altsrc/json_command_test.go	/^package altsrc$/;"	p
altsrc	altsrc/json_source_context.go	/^package altsrc$/;"	p
altsrc	altsrc/map_input_source.go	/^package altsrc$/;"	p
altsrc	altsrc/map_input_source_test.go	/^package altsrc$/;"	p
altsrc	altsrc/toml_command_test.go	/^package altsrc$/;"	p
altsrc	altsrc/toml_file_loader.go	/^package altsrc$/;"	p
altsrc	altsrc/yaml_command_test.go	/^package altsrc$/;"	p
altsrc	altsrc/yaml_file_loader.go	/^package altsrc$/;"	p
appActionDeprecationURL	app.go	/^	appActionDeprecationURL = fmt.Sprintf("%s#deprecated-cli-app-action-signature", changeLogURL)$/;"	v	package:cli
appendCommand	app.go	/^func (a *App) appendCommand(c *Command) {$/;"	f	unknown:cli.App
appendFlag	app.go	/^func (a *App) appendFlag(fl Flag) {$/;"	f	unknown:cli.App
appendFlag	command.go	/^func (c *Command) appendFlag(fl Flag) {$/;"	f	unknown:cli.Command
args	args.go	/^type args []string$/;"	t	package:cli
boolFlagTests	flag_test.go	/^var boolFlagTests = []struct {$/;"	v	package:cli
castDuration	altsrc/map_input_source.go	/^func castDuration(name string, value interface{}) (time.Duration, error) {$/;"	f	package:altsrc	typeref:typename:(time.Duration, error)
categories	app.go	/^	categories CommandCategories$/;"	m	struct:cli.App	typeref:typename:CommandCategories
changeLogURL	app.go	/^	changeLogURL            = "https:\/\/github.com\/urfave\/cli\/blob\/master\/docs\/CHANGELOG.md"$/;"	v	package:cli
checkCommandCompletions	help.go	/^func checkCommandCompletions(c *Context, name string) bool {$/;"	f	package:cli	typeref:typename:bool
checkCommandHelp	help.go	/^func checkCommandHelp(c *Context, name string) bool {$/;"	f	package:cli	typeref:typename:bool
checkCompletions	help.go	/^func checkCompletions(c *Context) bool {$/;"	f	package:cli	typeref:typename:bool
checkHelp	help.go	/^func checkHelp(c *Context) bool {$/;"	f	package:cli	typeref:typename:bool
checkRequiredFlags	context.go	/^func (context *Context) checkRequiredFlags(flags []Flag) requiredFlagsErr {$/;"	f	unknown:cli.Context	typeref:typename:requiredFlagsErr
checkShellCompleteFlag	help.go	/^func checkShellCompleteFlag(a *App, arguments []string) (bool, []string) {$/;"	f	package:cli	typeref:typename:(bool, []string)
checkSubcommandHelp	help.go	/^func checkSubcommandHelp(c *Context) bool {$/;"	f	package:cli	typeref:typename:bool
checkVersion	help.go	/^func checkVersion(c *Context) bool {$/;"	f	package:cli	typeref:typename:bool
choice	flag_choice.go	/^	choice Choice$/;"	m	struct:cli.choiceValue	typeref:typename:Choice
choiceValue	flag_choice.go	/^type choiceValue struct {$/;"	s	package:cli
cli	README.md	/^cli$/;"	c
cli	app.go	/^package cli$/;"	p
cli	app_test.go	/^package cli$/;"	p
cli	args.go	/^package cli$/;"	p
cli	category.go	/^package cli$/;"	p
cli	cli.go	/^package cli$/;"	p
cli	command.go	/^package cli$/;"	p
cli	command_test.go	/^package cli$/;"	p
cli	context.go	/^package cli$/;"	p
cli	context_test.go	/^package cli$/;"	p
cli	docs.go	/^package cli$/;"	p
cli	docs_test.go	/^package cli$/;"	p
cli	errors.go	/^package cli$/;"	p
cli	errors_test.go	/^package cli$/;"	p
cli	fish.go	/^package cli$/;"	p
cli	fish_test.go	/^package cli$/;"	p
cli	flag.go	/^package cli$/;"	p
cli	flag_bool.go	/^package cli$/;"	p
cli	flag_choice.go	/^package cli$/;"	p
cli	flag_duration.go	/^package cli$/;"	p
cli	flag_float64.go	/^package cli$/;"	p
cli	flag_float64_slice.go	/^package cli$/;"	p
cli	flag_generic.go	/^package cli$/;"	p
cli	flag_int.go	/^package cli$/;"	p
cli	flag_int64.go	/^package cli$/;"	p
cli	flag_int64_slice.go	/^package cli$/;"	p
cli	flag_int_slice.go	/^package cli$/;"	p
cli	flag_path.go	/^package cli$/;"	p
cli	flag_string.go	/^package cli$/;"	p
cli	flag_string_slice.go	/^package cli$/;"	p
cli	flag_test.go	/^package cli$/;"	p
cli	flag_timestamp.go	/^package cli$/;"	p
cli	flag_uint.go	/^package cli$/;"	p
cli	flag_uint64.go	/^package cli$/;"	p
cli	funcs.go	/^package cli$/;"	p
cli	help.go	/^package cli$/;"	p
cli	help_test.go	/^package cli$/;"	p
cli	helpers_test.go	/^package cli$/;"	p
cli	parse.go	/^package cli$/;"	p
cli	sort.go	/^package cli$/;"	p
cli	sort_test.go	/^package cli$/;"	p
cli	template.go	/^package cli$/;"	p
cli v1 manual	docs/v1/manual.md	/^cli v1 manual$/;"	c
cli v2 manual	docs/v2/manual.md	/^cli v2 manual$/;"	c
cli.Flag changed	docs/migrate-v1-to-v2.md	/^# cli.Flag changed$/;"	c
cliArgContains	help.go	/^func cliArgContains(flagName string) bool {$/;"	f	package:cli	typeref:typename:bool
cliTemplate	docs.go	/^type cliTemplate struct {$/;"	s	package:cli
clone	flag_float64_slice.go	/^func (f *Float64Slice) clone() *Float64Slice {$/;"	f	unknown:cli.Float64Slice	typeref:typename:*Float64Slice
clone	flag_int64_slice.go	/^func (i *Int64Slice) clone() *Int64Slice {$/;"	f	unknown:cli.Int64Slice	typeref:typename:*Int64Slice
clone	flag_int_slice.go	/^func (i *IntSlice) clone() *IntSlice {$/;"	f	unknown:cli.IntSlice	typeref:typename:*IntSlice
clone	flag_string_slice.go	/^func (s *StringSlice) clone() *StringSlice {$/;"	f	unknown:cli.StringSlice	typeref:typename:*StringSlice
commaWhitespace	flag.go	/^	commaWhitespace = regexp.MustCompile("[, ]+.*")$/;"	v	package:cli
commandAppTests	app_test.go	/^var commandAppTests = []struct {$/;"	v	package:cli
commandCategories	category.go	/^type commandCategories []*commandCategory$/;"	t	package:cli
commandCategory	category.go	/^type commandCategory struct {$/;"	s	package:cli
commandNamePath	command.go	/^	commandNamePath []string$/;"	m	struct:cli.Command	typeref:typename:[]string
commands	category.go	/^	commands []*Command$/;"	m	struct:cli.commandCategory	typeref:typename:[]*Command
compileTime	app.go	/^func compileTime() time.Time {$/;"	f	package:cli	typeref:typename:time.Time
config, c	testdata/expected-doc-full.md	/^## config, c$/;"	s
config, c	testdata/expected-doc-no-authors.md	/^## config, c$/;"	s
config, c	testdata/expected-doc-no-flags.md	/^## config, c$/;"	s
contactSysadmin	app.go	/^	contactSysadmin         = "This is an error in the application.  Please contact the distributor/;"	v	package:cli
copyFlag	flag.go	/^func copyFlag(name string, ff *flag.Flag, set *flag.FlagSet) {$/;"	f	package:cli
customBoolFlag	app_test.go	/^type customBoolFlag struct {$/;"	s	package:cli
defaultChoice	flag_choice.go	/^type defaultChoice struct {$/;"	s	package:cli
defaultInputSource	altsrc/default_input_source.go	/^func defaultInputSource() (InputSourceContext, error) {$/;"	f	package:altsrc	typeref:typename:(InputSourceContext, error)
defaultPlaceholder	flag.go	/^const defaultPlaceholder = "VALUE"$/;"	c	package:cli
deserialized	altsrc/json_source_context.go	/^	deserialized map[string]interface{}$/;"	m	struct:altsrc.jsonSource	typeref:typename:map[string]interface{}
didSetup	app.go	/^	didSetup bool$/;"	m	struct:cli.App	typeref:typename:bool
durationFlagTests	flag_test.go	/^var durationFlagTests = []struct {$/;"	v	package:cli
envHintFlagTests	flag_test.go	/^var envHintFlagTests = []struct {$/;"	v	package:cli
equal	app_test.go	/^func equal(actualOutputLines, expectedOutputLines []string, t *testing.T) bool {$/;"	f	package:cli	typeref:typename:bool
errInvalidActionType	app.go	/^	errInvalidActionType    = NewExitError("ERROR invalid Action type. "+$/;"	v	package:cli
errParse	flag_choice.go	/^var errParse = errors.New("parse error")$/;"	v	package:cli
errRequiredFlags	errors.go	/^type errRequiredFlags struct {$/;"	s	package:cli
error	errors_test.go	/^	error$/;"	M	struct:cli.ErrorWithFormat	typeref:typename:error
escapeSingleQuotes	fish.go	/^func escapeSingleQuotes(input string) string {$/;"	f	package:cli	typeref:typename:string
exitCode	errors.go	/^	exitCode int$/;"	m	struct:cli.exitError	typeref:typename:int
exitError	errors.go	/^type exitError struct {$/;"	s	package:cli
expect	altsrc/helpers_test.go	/^func expect(t *testing.T, a interface{}, b interface{}) {$/;"	f	package:altsrc
expect	flag_test.go	/^	expect  string$/;"	m	struct:cli.flagDefaultTestCase	typeref:typename:string
expect	helpers_test.go	/^func expect(t *testing.T, a interface{}, b interface{}) {$/;"	f	package:cli
expectFileContent	docs_test.go	/^func expectFileContent(t *testing.T, file, expected string) {$/;"	f	package:cli
fakeErrWriter	app_test.go	/^	fakeErrWriter = &bytes.Buffer{}$/;"	v	package:cli
fakeOsExiter	app_test.go	/^	fakeOsExiter = func(rc int) {$/;"	v	package:cli
file	altsrc/json_source_context.go	/^	file         string$/;"	m	struct:altsrc.jsonSource	typeref:typename:string
file	altsrc/map_input_source.go	/^	file     string$/;"	m	struct:altsrc.MapInputSource	typeref:typename:string
fileName	altsrc/json_command_test.go	/^	fileName   = "current.json"$/;"	c	package:altsrc
fishAddFileFlag	fish.go	/^func fishAddFileFlag(flag Flag, completion *strings.Builder) {$/;"	f	package:cli
fishCompletionTemplate	fish.go	/^type fishCompletionTemplate struct {$/;"	s	package:cli
fishSubcommandHelper	fish.go	/^func (a *App) fishSubcommandHelper(allCommands []string) string {$/;"	f	unknown:cli.App	typeref:typename:string
flag	flag_test.go	/^	flag    Flag$/;"	m	struct:cli.flagDefaultTestCase	typeref:typename:Flag
flagDefaultTestCase	flag_test.go	/^type flagDefaultTestCase struct {$/;"	s	package:cli
flagDetails	docs.go	/^func flagDetails(flag DocGenerationFlag) string {$/;"	f	package:cli	typeref:typename:string
flagFromEnvOrFile	flag.go	/^func flagFromEnvOrFile(envVars []string, filePath string) (val string, ok bool) {$/;"	f	package:cli	typeref:typename:(val string, ok bool)
flagNames	flag.go	/^func flagNames(name string, aliases []string) []string {$/;"	f	package:cli	typeref:typename:[]string
flagSet	context.go	/^	flagSet       *flag.FlagSet$/;"	m	struct:cli.Context	typeref:typename:*flag.FlagSet
flagSet	flag.go	/^func flagSet(name string, flags []Flag) (*flag.FlagSet, error) {$/;"	f	package:cli	typeref:typename:(*flag.FlagSet, error)
flagStringSliceField	flag.go	/^func flagStringSliceField(f Flag, name string) []string {$/;"	f	package:cli	typeref:typename:[]string
flagValue	flag.go	/^func flagValue(f Flag) reflect.Value {$/;"	f	package:cli	typeref:typename:reflect.Value
float64FlagTests	flag_test.go	/^var float64FlagTests = []struct {$/;"	v	package:cli
float64SliceFlagTests	flag_test.go	/^var float64SliceFlagTests = []struct {$/;"	v	package:cli
float64ToString	altsrc/flag.go	/^func float64ToString(f float64) string {$/;"	f	package:altsrc	typeref:typename:string
formatDefault	flag.go	/^func formatDefault(format string) string {$/;"	f	package:cli	typeref:typename:string
genericFlagTests	flag_test.go	/^var genericFlagTests = []struct {$/;"	v	package:cli
getMissingFlags	errors.go	/^func (e *errRequiredFlags) getMissingFlags() []string {$/;"	f	unknown:cli.errRequiredFlags	typeref:typename:[]string
getValue	altsrc/json_source_context.go	/^func (x *jsonSource) getValue(key string) (interface{}, error) {$/;"	f	unknown:altsrc.jsonSource	typeref:typename:(interface{}, error)
handleExitCoder	app.go	/^func (a *App) handleExitCoder(context *Context, err error) {$/;"	f	unknown:cli.App
handleMultiError	errors.go	/^func handleMultiError(multiErr MultiError) int {$/;"	f	package:cli	typeref:typename:int
hasBeenSet	flag_float64_slice.go	/^	hasBeenSet bool$/;"	m	struct:cli.Float64Slice	typeref:typename:bool
hasBeenSet	flag_int64_slice.go	/^	hasBeenSet bool$/;"	m	struct:cli.Int64Slice	typeref:typename:bool
hasBeenSet	flag_int_slice.go	/^	hasBeenSet bool$/;"	m	struct:cli.IntSlice	typeref:typename:bool
hasBeenSet	flag_string_slice.go	/^	hasBeenSet bool$/;"	m	struct:cli.StringSlice	typeref:typename:bool
hasBeenSet	flag_timestamp.go	/^	hasBeenSet bool$/;"	m	struct:cli.Timestamp	typeref:typename:bool
hasCommand	command.go	/^func hasCommand(commands []*Command, command *Command) bool {$/;"	f	package:cli	typeref:typename:bool
hasFlag	flag.go	/^func hasFlag(flags []Flag, fl Flag) bool {$/;"	f	package:cli	typeref:typename:bool
helpCommand	help.go	/^var helpCommand = &Command{$/;"	v	package:cli
helpPrinter	help.go	/^type helpPrinter func(w io.Writer, templ string, data interface{})$/;"	t	package:cli
helpPrinterCustom	help.go	/^type helpPrinterCustom func(w io.Writer, templ string, data interface{}, customFunc map[string]i/;"	t	package:cli
helpSubcommand	help.go	/^var helpSubcommand = &Command{$/;"	v	package:cli
incorrectTypeForFlagError	altsrc/map_input_source.go	/^func incorrectTypeForFlagError(name, expectedTypeName string, value interface{}) error {$/;"	f	package:altsrc	typeref:typename:error
indent	help.go	/^func indent(spaces int, v string) string {$/;"	f	package:cli	typeref:typename:string
info, i, in	testdata/expected-doc-full.md	/^## info, i, in$/;"	s
info, i, in	testdata/expected-doc-no-authors.md	/^## info, i, in$/;"	s
info, i, in	testdata/expected-doc-no-flags.md	/^## info, i, in$/;"	s
init	app_test.go	/^func init() {$/;"	f	package:cli
init	flag_choice.go	/^func (c *defaultChoice) init(v Choices) {$/;"	f	unknown:cli.defaultChoice
init	helpers_test.go	/^func init() {$/;"	f	package:cli
int64FlagTests	flag_test.go	/^var int64FlagTests = []struct {$/;"	v	package:cli
int64SliceFlagTests	flag_test.go	/^var int64SliceFlagTests = []struct {$/;"	v	package:cli
intFlagTests	flag_test.go	/^var intFlagTests = []struct {$/;"	v	package:cli
intSliceFlagTests	flag_test.go	/^var intSliceFlagTests = []struct {$/;"	v	package:cli
interfaceOf	flag_choice.go	/^func interfaceOf(v reflect.Value) interface{} {$/;"	f	package:cli	typeref:typename:interface{}
isEnvVarSet	altsrc/flag.go	/^func isEnvVarSet(envVars []string) bool {$/;"	f	package:altsrc	typeref:typename:bool
isNil	flag_choice.go	/^func isNil(v reflect.Value) bool {$/;"	f	package:cli	typeref:typename:bool
isSplittable	parse.go	/^func isSplittable(flagArg string) bool {$/;"	f	package:cli	typeref:typename:bool
iterativeParser	parse.go	/^type iterativeParser interface {$/;"	i	package:cli
jsonGetValue	altsrc/json_source_context.go	/^func jsonGetValue(key string, m map[string]interface{}) (interface{}, error) {$/;"	f	package:altsrc	typeref:typename:(interface{}, error)
jsonSource	altsrc/json_source_context.go	/^type jsonSource struct {$/;"	s	package:altsrc
lastExitCode	app_test.go	/^	lastExitCode = 0$/;"	v	package:cli
layout	flag_timestamp.go	/^	layout     string$/;"	m	struct:cli.Timestamp	typeref:typename:string
lexicographicLess	sort.go	/^func lexicographicLess(i, j string) bool {$/;"	f	package:cli	typeref:typename:bool
lexicographicLessTests	sort_test.go	/^var lexicographicLessTests = []struct {$/;"	v	package:cli
loadDataFrom	altsrc/yaml_file_loader.go	/^func loadDataFrom(filePath string) ([]byte, error) {$/;"	f	package:altsrc	typeref:typename:([]byte, error)
lookupBool	flag_bool.go	/^func lookupBool(name string, set *flag.FlagSet) bool {$/;"	f	package:cli	typeref:typename:bool
lookupDuration	flag_duration.go	/^func lookupDuration(name string, set *flag.FlagSet) time.Duration {$/;"	f	package:cli	typeref:typename:time.Duration
lookupFlag	context.go	/^func (ctx *Context) lookupFlag(name string) Flag {$/;"	f	unknown:cli.Context	typeref:typename:Flag
lookupFlagSet	context.go	/^func (ctx *Context) lookupFlagSet(name string) *flag.FlagSet {$/;"	f	unknown:cli.Context	typeref:typename:*flag.FlagSet
lookupFloat64	flag_float64.go	/^func lookupFloat64(name string, set *flag.FlagSet) float64 {$/;"	f	package:cli	typeref:typename:float64
lookupFloat64Slice	flag_float64_slice.go	/^func lookupFloat64Slice(name string, set *flag.FlagSet) []float64 {$/;"	f	package:cli	typeref:typename:[]float64
lookupGeneric	flag_generic.go	/^func lookupGeneric(name string, set *flag.FlagSet) interface{} {$/;"	f	package:cli	typeref:typename:interface{}
lookupInt	flag_int.go	/^func lookupInt(name string, set *flag.FlagSet) int {$/;"	f	package:cli	typeref:typename:int
lookupInt64	flag_int64.go	/^func lookupInt64(name string, set *flag.FlagSet) int64 {$/;"	f	package:cli	typeref:typename:int64
lookupInt64Slice	flag_int64_slice.go	/^func lookupInt64Slice(name string, set *flag.FlagSet) []int64 {$/;"	f	package:cli	typeref:typename:[]int64
lookupIntSlice	flag_int_slice.go	/^func lookupIntSlice(name string, set *flag.FlagSet) []int {$/;"	f	package:cli	typeref:typename:[]int
lookupPath	flag_path.go	/^func lookupPath(name string, set *flag.FlagSet) string {$/;"	f	package:cli	typeref:typename:string
lookupString	flag_string.go	/^func lookupString(name string, set *flag.FlagSet) string {$/;"	f	package:cli	typeref:typename:string
lookupStringSlice	flag_string_slice.go	/^func lookupStringSlice(name string, set *flag.FlagSet) []string {$/;"	f	package:cli	typeref:typename:[]string
lookupTimestamp	flag_timestamp.go	/^func lookupTimestamp(name string, set *flag.FlagSet) *time.Time {$/;"	f	package:cli	typeref:typename:*time.Time
lookupUint	flag_uint.go	/^func lookupUint(name string, set *flag.FlagSet) uint {$/;"	f	package:cli	typeref:typename:uint
lookupUint64	flag_uint64.go	/^func lookupUint64(name string, set *flag.FlagSet) uint64 {$/;"	f	package:cli	typeref:typename:uint64
main	internal/example-cli/example-cli.go	/^func main() {$/;"	f	package:main
main	internal/example-cli/example-cli.go	/^package main$/;"	p
main	internal/example-hello-world/example-hello-world.go	/^func main() {$/;"	f	package:main
main	internal/example-hello-world/example-hello-world.go	/^package main$/;"	p
makeFlagNameVisitor	context.go	/^func makeFlagNameVisitor(names *[]string) func(*flag.Flag) {$/;"	f	package:cli	typeref:typename:func(*flag.Flag)
message	errors.go	/^	message  interface{}$/;"	m	struct:cli.exitError	typeref:typename:interface{}
missingFlags	errors.go	/^	missingFlags []string$/;"	m	struct:cli.errRequiredFlags	typeref:typename:[]string
multiError	errors.go	/^type multiError []error$/;"	t	package:cli
my question is...	.github/ISSUE_TEMPLATE/question.md	/^## my question is...$/;"	s
my urfave/cli version is	.github/ISSUE_TEMPLATE/v1-bug-report.md	/^## my urfave\/cli version is$/;"	s
my urfave/cli version is	.github/ISSUE_TEMPLATE/v2-bug-report.md	/^## my urfave\/cli version is$/;"	s
name	category.go	/^	name     string$/;"	m	struct:cli.commandCategory	typeref:typename:string
name	flag_test.go	/^	name    string$/;"	m	struct:cli.flagDefaultTestCase	typeref:typename:string
nestedJSON	altsrc/json_command_test.go	/^	nestedJSON = `{"top": {"test": 15}}`$/;"	c	package:altsrc
nestedVal	altsrc/map_input_source.go	/^func nestedVal(name string, tree map[interface{}]interface{}) (interface{}, bool) {$/;"	f	package:altsrc	typeref:typename:(interface{}, bool)
newChoiceValue	flag_choice.go	/^func newChoiceValue(choice Choice, val interface{}) *choiceValue {$/;"	f	package:cli	typeref:typename:*choiceValue
newChoiceValueSwap	flag_choice.go	/^func newChoiceValueSwap(choice Choice, val interface{}, p interface{}) (*choiceValue, error) {$/;"	f	package:cli	typeref:typename:(*choiceValue, error)
newCommandCategories	category.go	/^func newCommandCategories() CommandCategories {$/;"	f	package:cli	typeref:typename:CommandCategories
newContextFromStringSlice	help_test.go	/^func newContextFromStringSlice(ss []string) *Context {$/;"	f	package:cli	typeref:typename:*Context
newFlagSet	app.go	/^func (a *App) newFlagSet() (*flag.FlagSet, error) {$/;"	f	unknown:cli.App	typeref:typename:(*flag.FlagSet, error)
newFlagSet	command.go	/^func (c *Command) newFlagSet() (*flag.FlagSet, error) {$/;"	f	unknown:cli.Command	typeref:typename:(*flag.FlagSet, error)
newMultiError	errors.go	/^func newMultiError(err ...error) MultiError {$/;"	f	package:cli	typeref:typename:MultiError
newTestApp	app_test.go	/^func newTestApp() *App {$/;"	f	package:cli	typeref:typename:*App
nindent	help.go	/^func nindent(spaces int, v string) string {$/;"	f	package:cli	typeref:typename:string
normalizeFlags	flag.go	/^func normalizeFlags(flags []Flag, set *flag.FlagSet) error {$/;"	f	package:cli	typeref:typename:error
offset	help.go	/^func offset(input string, fixed int) int {$/;"	f	package:cli	typeref:typename:int
opCounts	app_test.go	/^type opCounts struct {$/;"	s	package:cli
parentContext	context.go	/^	parentContext *Context$/;"	m	struct:cli.Context	typeref:typename:*Context
parseFlags	command.go	/^func (c *Command) parseFlags(args Args, shellComplete bool) (*flag.FlagSet, error) {$/;"	f	unknown:cli.Command	typeref:typename:(*flag.FlagSet, error)
parseIter	parse.go	/^func parseIter(set *flag.FlagSet, ip iterativeParser, args []string, shellComplete bool) error {$/;"	f	package:cli	typeref:typename:error
paste `go env` output in here	.github/ISSUE_TEMPLATE/v1-bug-report.md	/^# paste `go env` output in here$/;"	c
paste `go env` output in here	.github/ISSUE_TEMPLATE/v2-bug-report.md	/^# paste `go env` output in here$/;"	c
paste `go version` output in here	.github/ISSUE_TEMPLATE/v1-bug-report.md	/^# paste `go version` output in here$/;"	c
paste `go version` output in here	.github/ISSUE_TEMPLATE/v2-bug-report.md	/^# paste `go version` output in here$/;"	c
pathFlagTests	flag_test.go	/^var pathFlagTests = []struct {$/;"	v	package:cli
prefixFor	flag.go	/^func prefixFor(name string) (prefix string) {$/;"	f	package:cli	typeref:typename:(prefix string)
prefixStringFlagTests	flag_test.go	/^var prefixStringFlagTests = []struct {$/;"	v	package:cli
prefixedNames	flag.go	/^func prefixedNames(names []string, placeholder string) string {$/;"	f	package:cli	typeref:typename:string
prepareArgsSynopsis	docs.go	/^func prepareArgsSynopsis(flags []Flag) []string {$/;"	f	package:cli	typeref:typename:[]string
prepareArgsWithValues	docs.go	/^func prepareArgsWithValues(flags []Flag) []string {$/;"	f	package:cli	typeref:typename:[]string
prepareCommands	docs.go	/^func prepareCommands(commands []*Command, level int) []string {$/;"	f	package:cli	typeref:typename:[]string
prepareFishCommands	fish.go	/^func (a *App) prepareFishCommands(commands []*Command, allCommands *[]string, previousCommands [/;"	f	unknown:cli.App	typeref:typename:[]string
prepareFishFlags	fish.go	/^func (a *App) prepareFishFlags(flags []Flag, previousCommands []string) []string {$/;"	f	unknown:cli.App	typeref:typename:[]string
prepareFlags	docs.go	/^func prepareFlags($/;"	f	package:cli	typeref:typename:[]string
printCommandSuggestions	help.go	/^func printCommandSuggestions(commands []*Command, writer io.Writer) {$/;"	f	package:cli
printFlagSuggestions	help.go	/^func printFlagSuggestions(lastArg string, flags []Flag, writer io.Writer) {$/;"	f	package:cli
printHelp	help.go	/^func printHelp(out io.Writer, templ string, data interface{}) {$/;"	f	package:cli
printHelpCustom	help.go	/^func printHelpCustom(out io.Writer, templ string, data interface{}, customFuncs map[string]inter/;"	f	package:cli
printVersion	help.go	/^func printVersion(c *Context) {$/;"	f	package:cli
quoteStrings	flag.go	/^func quoteStrings(ss []string) []string {$/;"	f	package:cli	typeref:typename:[]string
readCommandToml	altsrc/toml_file_loader.go	/^func readCommandToml(filePath string, container interface{}) (err error) {$/;"	f	package:altsrc	typeref:typename:(err error)
readCommandYaml	altsrc/yaml_file_loader.go	/^func readCommandYaml(filePath string, container interface{}) (err error) {$/;"	f	package:altsrc	typeref:typename:(err error)
refute	altsrc/helpers_test.go	/^func refute(t *testing.T, a interface{}, b interface{}) {$/;"	f	package:altsrc
requiredFlagsErr	errors.go	/^type requiredFlagsErr interface {$/;"	i	package:cli
resetEnv	flag_test.go	/^func resetEnv(env []string) {$/;"	f	package:cli
runTest	altsrc/flag_test.go	/^func runTest(t *testing.T, test testApplyInputSource) *cli.Context {$/;"	f	package:altsrc	typeref:typename:*cli.Context
sMap	flag_choice.go	/^	sMap map[interface{}]string$/;"	m	struct:cli.defaultChoice	typeref:typename:map[interface{}]string
set	altsrc/flag_generated.go	/^	set *flag.FlagSet$/;"	m	struct:altsrc.BoolFlag	typeref:typename:*flag.FlagSet
set	altsrc/flag_generated.go	/^	set *flag.FlagSet$/;"	m	struct:altsrc.DurationFlag	typeref:typename:*flag.FlagSet
set	altsrc/flag_generated.go	/^	set *flag.FlagSet$/;"	m	struct:altsrc.Float64Flag	typeref:typename:*flag.FlagSet
set	altsrc/flag_generated.go	/^	set *flag.FlagSet$/;"	m	struct:altsrc.Float64SliceFlag	typeref:typename:*flag.FlagSet
set	altsrc/flag_generated.go	/^	set *flag.FlagSet$/;"	m	struct:altsrc.GenericFlag	typeref:typename:*flag.FlagSet
set	altsrc/flag_generated.go	/^	set *flag.FlagSet$/;"	m	struct:altsrc.Int64Flag	typeref:typename:*flag.FlagSet
set	altsrc/flag_generated.go	/^	set *flag.FlagSet$/;"	m	struct:altsrc.Int64SliceFlag	typeref:typename:*flag.FlagSet
set	altsrc/flag_generated.go	/^	set *flag.FlagSet$/;"	m	struct:altsrc.IntFlag	typeref:typename:*flag.FlagSet
set	altsrc/flag_generated.go	/^	set *flag.FlagSet$/;"	m	struct:altsrc.IntSliceFlag	typeref:typename:*flag.FlagSet
set	altsrc/flag_generated.go	/^	set *flag.FlagSet$/;"	m	struct:altsrc.PathFlag	typeref:typename:*flag.FlagSet
set	altsrc/flag_generated.go	/^	set *flag.FlagSet$/;"	m	struct:altsrc.StringFlag	typeref:typename:*flag.FlagSet
set	altsrc/flag_generated.go	/^	set *flag.FlagSet$/;"	m	struct:altsrc.StringSliceFlag	typeref:typename:*flag.FlagSet
set	altsrc/flag_generated.go	/^	set *flag.FlagSet$/;"	m	struct:altsrc.Uint64Flag	typeref:typename:*flag.FlagSet
set	altsrc/flag_generated.go	/^	set *flag.FlagSet$/;"	m	struct:altsrc.UintFlag	typeref:typename:*flag.FlagSet
setValue	flag_choice.go	/^func setValue(v reflect.Value, val interface{}) {$/;"	f	package:cli
shellComplete	context.go	/^	shellComplete bool$/;"	m	struct:cli.Context	typeref:typename:bool
simpleJSON	altsrc/json_command_test.go	/^	simpleJSON = `{"test": 15}`$/;"	c	package:altsrc
slPfx	flag.go	/^	slPfx = fmt.Sprintf("sl:::%d:::", time.Now().UTC().UnixNano())$/;"	v	package:cli
slice	flag_float64_slice.go	/^	slice      []float64$/;"	m	struct:cli.Float64Slice	typeref:typename:[]float64
slice	flag_int64_slice.go	/^	slice      []int64$/;"	m	struct:cli.Int64Slice	typeref:typename:[]int64
slice	flag_int_slice.go	/^	slice      []int$/;"	m	struct:cli.IntSlice	typeref:typename:[]int
slice	flag_string_slice.go	/^	slice      []string$/;"	m	struct:cli.StringSlice	typeref:typename:[]string
some-command	testdata/expected-doc-full.md	/^## some-command$/;"	s
some-command	testdata/expected-doc-no-authors.md	/^## some-command$/;"	s
some-command	testdata/expected-doc-no-flags.md	/^## some-command$/;"	s
splitShortOptions	parse.go	/^func splitShortOptions(set *flag.FlagSet, arg string) []string {$/;"	f	package:cli	typeref:typename:[]string
ss	flag_choice.go	/^	ss   []string$/;"	m	struct:cli.defaultChoice	typeref:typename:[]string
startApp	command.go	/^func (c *Command) startApp(ctx *Context) error {$/;"	f	unknown:cli.Command	typeref:typename:error
stringFlagTests	flag_test.go	/^var stringFlagTests = []struct {$/;"	v	package:cli
stringSliceFlagTests	flag_test.go	/^var stringSliceFlagTests = []struct {$/;"	v	package:cli
stringifyChoiceFlag	flag.go	/^func stringifyChoiceFlag(f *ChoiceFlag) string {$/;"	f	package:cli	typeref:typename:string
stringifyFlag	flag.go	/^func stringifyFlag(f Flag) string {$/;"	f	package:cli	typeref:typename:string
stringifyFloat64SliceFlag	flag.go	/^func stringifyFloat64SliceFlag(f *Float64SliceFlag) string {$/;"	f	package:cli	typeref:typename:string
stringifyInt64SliceFlag	flag.go	/^func stringifyInt64SliceFlag(f *Int64SliceFlag) string {$/;"	f	package:cli	typeref:typename:string
stringifyIntSliceFlag	flag.go	/^func stringifyIntSliceFlag(f *IntSliceFlag) string {$/;"	f	package:cli	typeref:typename:string
stringifySliceFlag	flag.go	/^func stringifySliceFlag(usage string, names, defaultVals []string, plchldr string) string {$/;"	f	package:cli	typeref:typename:string
stringifyStringSliceFlag	flag.go	/^func stringifyStringSliceFlag(f *StringSliceFlag) string {$/;"	f	package:cli	typeref:typename:string
sub-config, s, ss	testdata/expected-doc-full.md	/^### sub-config, s, ss$/;"	S
sub-config, s, ss	testdata/expected-doc-no-authors.md	/^### sub-config, s, ss$/;"	S
sub-config, s, ss	testdata/expected-doc-no-flags.md	/^### sub-config, s, ss$/;"	S
testApp	docs_test.go	/^func testApp() *App {$/;"	f	package:cli	typeref:typename:*App
testApplyInputSource	altsrc/flag_test.go	/^type testApplyInputSource struct {$/;"	s	package:altsrc
timestamp	flag_timestamp.go	/^	timestamp  *time.Time$/;"	m	struct:cli.Timestamp	typeref:typename:*time.Time
toParse	flag_test.go	/^	toParse []string$/;"	m	struct:cli.flagDefaultTestCase	typeref:typename:[]string
tomlMap	altsrc/toml_file_loader.go	/^type tomlMap struct {$/;"	s	package:altsrc
tomlSourceContext	altsrc/toml_file_loader.go	/^type tomlSourceContext struct {$/;"	s	package:altsrc
uint64FlagTests	flag_test.go	/^var uint64FlagTests = []struct {$/;"	v	package:cli
uintFlagTests	flag_test.go	/^var uintFlagTests = []struct {$/;"	v	package:cli
unmarshalMap	altsrc/toml_file_loader.go	/^func unmarshalMap(i interface{}) (ret map[interface{}]interface{}, err error) {$/;"	f	package:altsrc	typeref:typename:(ret map[interface{}]interface{}, err error)
unquoteUsage	flag.go	/^func unquoteUsage(usage string) (string, string) {$/;"	f	package:cli	typeref:typename:(string, string)
useShortOptionHandling	app.go	/^func (a *App) useShortOptionHandling() bool {$/;"	f	unknown:cli.App	typeref:typename:bool
useShortOptionHandling	command.go	/^func (c *Command) useShortOptionHandling() bool {$/;"	f	unknown:cli.Command	typeref:typename:bool
vMap	flag_choice.go	/^	vMap map[string]interface{}$/;"	m	struct:cli.defaultChoice	typeref:typename:map[string]interface{}
value	flag_choice.go	/^	value  reflect.Value$/;"	m	struct:cli.choiceValue	typeref:typename:reflect.Value
valueMap	altsrc/map_input_source.go	/^	valueMap map[interface{}]interface{}$/;"	m	struct:altsrc.MapInputSource	typeref:typename:map[interface{}]interface{}
visibleFlags	flag.go	/^func visibleFlags(fl []Flag) []Flag {$/;"	f	package:cli	typeref:typename:[]Flag
wd	altsrc/helpers_test.go	/^	wd, _ = os.Getwd()$/;"	v	package:altsrc
withEnvHint	flag.go	/^func withEnvHint(envVars []string, str string) string {$/;"	f	package:cli	typeref:typename:string
withFileHint	flag.go	/^func withFileHint(filePath, str string) string {$/;"	f	package:cli	typeref:typename:string
wrap	help.go	/^func wrap(input string, offset int, wrapAt int) string {$/;"	f	package:cli	typeref:typename:string
wrapLine	help.go	/^func wrapLine(input string, offset int, wrapAt int, padding string) string {$/;"	f	package:cli	typeref:typename:string
writeDocTemplate	docs.go	/^func (a *App) writeDocTemplate(w io.Writer, sectionNum int) error {$/;"	f	unknown:cli.App	typeref:typename:error
writeFishCompletionTemplate	fish.go	/^func (a *App) writeFishCompletionTemplate(w io.Writer) error {$/;"	f	unknown:cli.App	typeref:typename:error
writeTempFile	altsrc/json_command_test.go	/^func writeTempFile(t *testing.T, name string, content string) func() {$/;"	f	package:altsrc	typeref:typename:func()
yamlSourceContext	altsrc/yaml_file_loader.go	/^type yamlSourceContext struct {$/;"	s	package:altsrc
